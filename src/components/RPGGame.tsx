import { useState, useEffect, useCallback } from 'react';
import { Player, NPC, Item, Equipment, Quest, GameScreen, MenuType } from '@/types/gameTypes';
import { Button } from '@/components/ui/button';
import GameIntro from './GameIntro';
import GameMap from './GameMap';
import PlayerStats from './PlayerStats';
import InventoryMenu from './InventoryMenu';
import QuestMenu from './QuestMenu';
import NPCDialogue from './NPCDialogue';
import MobileControls from './MobileControls';
import { useToast } from '@/hooks/use-toast';

const RPGGame = () => {
  const { toast } = useToast();
  const [gameScreen, setGameScreen] = useState<GameScreen>('intro');
  const [activeMenu, setActiveMenu] = useState<MenuType>('none');
  const [selectedNPC, setSelectedNPC] = useState<NPC | null>(null);

  // Initial game items
  const initialItems: Item[] = [
    {
      id: 'starter-sword',
      name: '–†–∂–∞–≤—ã–π –º–µ—á',
      type: 'weapon',
      slot: 'weapon',
      stats: { damage: 5 },
      description: '–°—Ç–∞—Ä—ã–π —Ä–∂–∞–≤—ã–π –º–µ—á –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –≤–æ–∏–Ω–∞',
      icon: '‚öîÔ∏è'
    },
    {
      id: 'leather-armor',
      name: '–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è',
      type: 'armor',
      slot: 'chest',
      stats: { armor: 3 },
      description: '–ü—Ä–æ—Å—Ç–∞—è –∫–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è',
      icon: 'üõ°Ô∏è'
    },
    {
      id: 'health-potion',
      name: '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è',
      type: 'consumable',
      description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 50 –µ–¥–∏–Ω–∏—Ü –∑–¥–æ—Ä–æ–≤—å—è',
      icon: 'üß™'
    }
  ];

  // Player state
  const [player, setPlayer] = useState<Player>({
    name: '–ì–µ—Ä–æ–π',
    position: { x: 10, y: 10 },
    health: 100,
    maxHealth: 100,
    mana: 50,
    maxMana: 50,
    experience: 0,
    level: 1,
    inventory: initialItems,
    equipment: {
      head: null,
      chest: null,
      legs: null,
      weapon: null,
      shield: null
    }
  });

  // NPCs
  const [npcs] = useState<NPC[]>([
    {
      id: 'merchant',
      name: '–¢–æ—Ä–≥–æ–≤–µ—Ü –ú–∞—Ä–∫',
      position: { x: 9, y: 8 },
      type: 'merchant',
      dialogue: [
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –ª–∞–≤–∫—É!',
        '–£ –º–µ–Ω—è –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å–º–µ–ª—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.',
        '–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç–µ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!'
      ],
      shop: [
        {
          id: 'iron-sword',
          name: '–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á',
          type: 'weapon',
          slot: 'weapon',
          stats: { damage: 12 },
          description: '–ü—Ä–æ—á–Ω—ã–π –∂–µ–ª–µ–∑–Ω—ã–π –º–µ—á',
          icon: '‚öîÔ∏è'
        }
      ]
    },
    {
      id: 'elder',
      name: '–°—Ç–∞—Ä–æ—Å—Ç–∞ –≠–¥–≤–∏–Ω',
      position: { x: 11, y: 8 },
      type: 'elder',
      dialogue: [
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –º–æ–ª–æ–¥–æ–π –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!',
        '–ù–∞—à–∞ –¥–µ—Ä–µ–≤–Ω—è –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏.',
        '–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?'
      ],
      quests: [
        {
          id: 'first-quest',
          title: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –¥–µ—Ä–µ–≤–Ω–µ–π',
          description: '–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –∂–∏—Ç–µ–ª—è–º–∏ –¥–µ—Ä–µ–≤–Ω–∏ –∏ –∏–∑—É—á–∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏.',
          status: 'available',
          objectives: [
            { description: '–ü–æ–≥–æ–≤–æ—Ä–∏ —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º', completed: false },
            { description: '–ò—Å—Å–ª–µ–¥—É–π –¥–µ—Ä–µ–≤–Ω—é', completed: false }
          ],
          rewards: {
            experience: 50,
            items: [{
              id: 'village-ring',
              name: '–ö–æ–ª—å—Ü–æ –¥–µ—Ä–µ–≤–Ω–∏',
              type: 'misc',
              description: '–ü–∞–º—è—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∂–∏—Ç–µ–ª–µ–π –¥–µ—Ä–µ–≤–Ω–∏',
              icon: 'üíç'
            }]
          }
        }
      ]
    }
  ]);

  const [quests, setQuests] = useState<Quest[]>([]);

  // Regeneration effect
  useEffect(() => {
    const regenInterval = setInterval(() => {
      setPlayer(prev => ({
        ...prev,
        health: Math.min(prev.maxHealth, prev.health + 1),
        mana: Math.min(prev.maxMana, prev.mana + 1)
      }));
    }, 3000);

    return () => clearInterval(regenInterval);
  }, []);

  const handlePlayerMove = useCallback((newPosition: { x: number; y: number }) => {
    setPlayer(prev => ({
      ...prev,
      position: newPosition
    }));
  }, []);

  const handleNPCInteract = useCallback((npc: NPC) => {
    setSelectedNPC(npc);
  }, []);

  const handleEquipItem = useCallback((item: Item) => {
    if (!item.slot) return;

    setPlayer(prev => {
      const newEquipment = { ...prev.equipment };
      const newInventory = prev.inventory.filter(invItem => invItem.id !== item.id);
      
      // If there's already an item in this slot, move it to inventory
      if (newEquipment[item.slot]) {
        newInventory.push(newEquipment[item.slot]!);
      }
      
      newEquipment[item.slot] = item;

      return {
        ...prev,
        equipment: newEquipment,
        inventory: newInventory
      };
    });

    toast({
      title: '–ü—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω',
      description: `${item.name} —Ç–µ–ø–µ—Ä—å —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω`,
      duration: 2000,
    });
  }, [toast]);

  const handleAcceptQuest = useCallback((quest: Quest) => {
    const updatedQuest = { ...quest, status: 'active' as const };
    setQuests(prev => [...prev.filter(q => q.id !== quest.id), updatedQuest]);
    setSelectedNPC(null);
    
    toast({
      title: '–ö–≤–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç!',
      description: `${quest.title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∂—É—Ä–Ω–∞–ª –∫–≤–µ—Å—Ç–æ–≤`,
      duration: 3000,
    });
  }, [toast]);

  const handleMobileMove = useCallback((direction: 'up' | 'down' | 'left' | 'right') => {
    const { x, y } = player.position;
    let newX = x;
    let newY = y;
    
    switch (direction) {
      case 'up':
        newY = Math.max(0, y - 1);
        break;
      case 'down':
        newY = Math.min(19, y + 1);
        break;
      case 'left':
        newX = Math.max(0, x - 1);
        break;
      case 'right':
        newX = Math.min(19, x + 1);
        break;
    }
    
    if (newX !== x || newY !== y) {
      handlePlayerMove({ x: newX, y: newY });
    }
  }, [player.position, handlePlayerMove]);

  const handleUnequipItem = useCallback((slot: keyof Equipment) => {
    const equippedItem = player.equipment[slot];
    if (!equippedItem) return;

    setPlayer(prev => ({
      ...prev,
      equipment: {
        ...prev.equipment,
        [slot]: null
      },
      inventory: [...prev.inventory, equippedItem]
    }));

    toast({
      title: '–ü—Ä–µ–¥–º–µ—Ç —Å–Ω—è—Ç',
      description: `${equippedItem.name} —É–±—Ä–∞–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å`,
      duration: 2000,
    });
  }, [player.equipment, toast]);

  if (gameScreen === 'intro') {
    return <GameIntro onComplete={() => setGameScreen('game')} />;
  }

  return (
    <div className="h-screen flex flex-col bg-background text-foreground overflow-hidden">
      <PlayerStats player={player} />
      
      <GameMap 
        player={player}
        npcs={npcs}
        onPlayerMove={handlePlayerMove}
        onNPCInteract={handleNPCInteract}
      />

      <MobileControls
        player={player}
        onMove={handleMobileMove}
        disabled={activeMenu !== 'none' || selectedNPC !== null}
      />

      {/* Game Controls */}
      <div className="fixed bottom-4 left-4 right-4 z-40">
        <div className="flex justify-center space-x-2">
          <Button
            variant="secondary"
            size="sm"
            onClick={() => setActiveMenu('inventory')}
            className="bg-card/90 backdrop-blur-sm"
          >
            üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
          </Button>
          <Button
            variant="secondary"
            size="sm"
            onClick={() => setActiveMenu('quests')}
            className="bg-card/90 backdrop-blur-sm"
          >
            üìú –ö–≤–µ—Å—Ç—ã
          </Button>
        </div>
      </div>

      {/* NPC Dialogue */}
      {selectedNPC && (
        <NPCDialogue
          npc={selectedNPC}
          onClose={() => setSelectedNPC(null)}
          onAcceptQuest={handleAcceptQuest}
        />
      )}

      {/* Menus */}
      {activeMenu === 'inventory' && (
        <InventoryMenu
          player={player}
          onClose={() => setActiveMenu('none')}
          onEquipItem={handleEquipItem}
          onUnequipItem={handleUnequipItem}
        />
      )}

      {activeMenu === 'quests' && (
        <QuestMenu
          quests={quests}
          onClose={() => setActiveMenu('none')}
        />
      )}
    </div>
  );
};

export default RPGGame;