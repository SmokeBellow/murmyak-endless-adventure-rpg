import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Player, NPC, Item, Equipment, Quest, GameScreen, MenuType, LocationType, Enemy, BattleState, BattleResult } from '@/types/gameTypes';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { useIsMobile } from '@/hooks/use-mobile';
import { addItemsToInventory, removeItemFromInventory, getTotalItemQuantity, getSellPrice } from '@/utils/inventory';
import { 
  calculateMovementSpeed, 
  calculateHealthRegen, 
  calculateManaRegen, 
  calculateDamage 
} from '@/utils/playerStats';
import { X } from 'lucide-react';
import GameMap from './GameMap';
import PlayerStats from './PlayerStats';
import InventoryMenu from './InventoryMenu';
import EquipmentMenu from './EquipmentMenu';
import QuestMenu from './QuestMenu';
import StatsMenu from './StatsMenu';
import { SkillsMenu } from './SkillsMenu';
import NPCDialogue from './NPCDialogue';
import VisualNovelDialogue from './VisualNovelDialogue';
import TradeMenu from './TradeMenu';
import VirtualJoystick from './VirtualJoystick';
import CoalMining from './CoalMining';
import OreMining from './OreMining';
import QuestRewardModal from './QuestRewardModal';
import LoadingScreen from './LoadingScreen';
import { useEnemySystem } from './EnemySystem';
import { getSkillById, availableSkills } from '@/data/skills';
import { minesObstaclesThick as minesObstacles } from '@/maps/minesLayout';
import { BattleScreen } from './BattleScreen';
import { BattleVictory } from './BattleVictory';
import { BattleDefeat } from './BattleDefeat';

const RPGGame = () => {
  const { toast } = useToast();
  const isMobile = useIsMobile();
  const [gameScreen, setGameScreen] = useState<GameScreen>('game');
  const [battleState, setBattleState] = useState<BattleState | null>(null);
  const [battleResult, setBattleResult] = useState<BattleResult | null>(null);
  const [damageTexts, setDamageTexts] = useState<any[]>([]);
  const [battleLog, setBattleLog] = useState<string[]>([]);
  const [activeMenu, setActiveMenu] = useState<MenuType>('none');
  const [selectedNPC, setSelectedNPC] = useState<NPC | null>(null);
  const [showVisualNovel, setShowVisualNovel] = useState(false);
  const [showCoalMining, setShowCoalMining] = useState(false);
  const [showOreMining, setShowOreMining] = useState(false);
  const [questReward, setQuestReward] = useState<Quest | null>(null);
  const [currentLocation, setCurrentLocation] = useState<LocationType>('village');
  const [isLoadingLocation, setIsLoadingLocation] = useState(false);
  const [isNoClipCheatEnabled, setIsNoClipCheatEnabled] = useState(false);
  const [isTreasureChestOpened, setIsTreasureChestOpened] = useState(false);

  // Resource nodes with regeneration
  const [resourceNodes, setResourceNodes] = useState({
    coal: {
      count: Math.floor(Math.random() * 4) + 1,
      lastRegen: Date.now()
    },
    ore: {
      count: Math.floor(Math.random() * 4) + 1,
      lastRegen: Date.now()
    }
  });

  // Initial game items
  const initialItems: Item[] = [
    {
      id: 'starter-sword',
      name: '–†–∂–∞–≤—ã–π –º–µ—á',
      type: 'weapon',
      slot: 'weapon',
      stats: { damage: 5 },
      description: '–°—Ç–∞—Ä—ã–π —Ä–∂–∞–≤—ã–π –º–µ—á –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –≤–æ–∏–Ω–∞',
      icon: '/old_sword.png'
    },
    {
      id: 'leather-armor',
      name: '–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è',
      type: 'armor',
      slot: 'chest',
      stats: { armor: 3 },
      description: '–ü—Ä–æ—Å—Ç–∞—è –∫–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è',
      icon: '/leatherarmor.png'
    },
    {
      id: 'health-potion',
      name: '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è',
      type: 'consumable',
      description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 50 –µ–¥–∏–Ω–∏—Ü –∑–¥–æ—Ä–æ–≤—å—è',
      icon: '/healthpotion.png',
      stackable: true,
      maxStack: 10,
      quantity: 1
    }
  ];

  // Calculate unallocated points based on level
  const calculateUnallocatedPoints = (level: number): number => {
    let points = level - 1; // 1 point per level after level 1
    points += Math.floor(level / 10) * 5; // 5 bonus points every 10 levels
    return points;
  };

  // Player state
  const [player, setPlayer] = useState<Player>({
    name: '–ì–µ—Ä–æ–π',
    position: { x: 1000, y: 1000 }, // Safe position away from buildings
    targetPosition: { x: 1000, y: 1000 },
    isMoving: false,
    direction: 'down', // Add direction tracking
    health: 100,
    maxHealth: 100,
    mana: 50,
    maxMana: 50,
    experience: 0,
    level: 1,
    coins: 50,
    skillSlots: ['power_strike', null, null], // –£–º–µ–Ω–∏–µ "–ú–æ—â–Ω—ã–π —É–¥–∞—Ä" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ—Ç–µ
    skillCooldowns: {}, // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–æ–≤ —É–º–µ–Ω–∏–π
    inventory: initialItems,
    equipment: {
      head: null,
      chest: null,
      legs: null,
      weapon: null,
      shield: null
    },
    stats: {
      strength: 5,
      agility: 5,
      intelligence: 5,
      constitution: 5,
      luck: 5
    },
    unallocatedPoints: 0,
    questProgress: {
      visitedMerchant: false,
      usedFountain: false,
      talkedToMerchant: false,
      talkedToBlacksmith: false,
      firstMerchantTalk: true,
      firstBlacksmithTalk: true
    },
    skillUsageStats: {
      warrior: 0,
      rogue: 0,
      mage: 0
    }
  });

  // NPCs
  const [npcs, setNpcs] = useState<NPC[]>([
    {
      id: 'merchant',
      name: '–¢–æ—Ä–≥–æ–≤–µ—Ü –ú–∞—Ä–∫',
      position: { x: 800, y: 1000 }, // Moved near the corrected house position
      type: 'merchant',
      dialogue: [
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –ª–∞–≤–∫—É!',
        '–£ –º–µ–Ω—è –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å–º–µ–ª—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.',
        '–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç–µ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!'
      ],
      shop: [
        {
          id: 'iron-sword',
          name: '–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á',
          type: 'weapon',
          slot: 'weapon',
          stats: { damage: 12 },
          description: '–ü—Ä–æ—á–Ω—ã–π –∂–µ–ª–µ–∑–Ω—ã–π –º–µ—á',
          icon: '/sword.png',
          price: 25
        },
        {
          id: 'steel-armor',
          name: '–°—Ç–∞–ª—å–Ω–∞—è –±—Ä–æ–Ω—è',
          type: 'armor',
          slot: 'chest',
          stats: { armor: 8 },
          description: '–ü—Ä–æ—á–Ω–∞—è —Å—Ç–∞–ª—å–Ω–∞—è –±—Ä–æ–Ω—è',
          icon: '/steelarmor.png',
          price: 40
        },
        {
          id: 'mana-potion',
          name: '–ó–µ–ª—å–µ –º–∞–Ω—ã',
          type: 'consumable',
          description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 30 –µ–¥–∏–Ω–∏—Ü –º–∞–Ω—ã',
          icon: 'üîÆ',
          price: 10
        },
        {
          id: 'heavy_strike_skill',
          name: '–ö–Ω–∏–≥–∞: –¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä',
          type: 'skill',
          skillId: 'heavy_strike',
          description: '–û–±—É—á–∞–µ—Ç —É–º–µ–Ω–∏—é "–¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä"',
          icon: '/old_sword.png',
          price: 1
        },
        {
          id: 'sand_in_eyes_skill',
          name: '–°–≤–∏—Ç–æ–∫: –ü–µ—Å–æ–∫ –≤ –≥–ª–∞–∑–∞',
          type: 'skill',
          skillId: 'sand_in_eyes',
          description: '–û–±—É—á–∞–µ—Ç —É–º–µ–Ω–∏—é "–ü–µ—Å–æ–∫ –≤ –≥–ª–∞–∑–∞"',
          icon: '/trash_nail.png',
          price: 1
        },
        {
          id: 'fury_cut_skill',
          name: '–°–≤–∏—Ç–æ–∫: –Ø—Ä–æ—Å—Ç–Ω—ã–π –ø–æ—Ä–µ–∑',
          type: 'skill',
          skillId: 'fury_cut',
          description: '–û–±—É—á–∞–µ—Ç —É–º–µ–Ω–∏—é "–Ø—Ä–æ—Å—Ç–Ω—ã–π –ø–æ—Ä–µ–∑"',
          icon: '/sword.png',
          price: 1
        },
        {
          id: 'fire_burst_skill',
          name: '–ì—Ä–∏–º—É–∞—Ä: –û–≥–Ω–µ–Ω–Ω—ã–π –≤—Å–ø–æ–ª–æ—Ö',
          type: 'skill',
          skillId: 'fire_burst',
          description: '–û–±—É—á–∞–µ—Ç —É–º–µ–Ω–∏—é "–û–≥–Ω–µ–Ω–Ω—ã–π –≤—Å–ø–æ–ª–æ—Ö"',
          icon: '/torch.png',
          price: 1
        },
        {
          id: 'frost_chains_skill',
          name: '–ì—Ä–∏–º—É–∞—Ä: –ú–æ—Ä–æ–∑–Ω—ã–µ —Ü–µ–ø–∏',
          type: 'skill',
          skillId: 'frost_chains',
          description: '–û–±—É—á–∞–µ—Ç —É–º–µ–Ω–∏—é "–ú–æ—Ä–æ–∑–Ω—ã–µ —Ü–µ–ø–∏"',
          icon: '/trash_rare_gem.png',
          price: 1
        },
        {
          id: 'mana_spark_skill',
          name: '–ì—Ä–∏–º—É–∞—Ä: –ò—Å–∫—Ä–∞ –º–∞–Ω—ã',
          type: 'skill',
          skillId: 'mana_spark',
          description: '–û–±—É—á–∞–µ—Ç —É–º–µ–Ω–∏—é "–ò—Å–∫—Ä–∞ –º–∞–Ω—ã"',
          icon: '/trash_gem.png',
          price: 1
        },
        {
          id: 'shadow_veil_skill',
          name: '–°–≤–∏—Ç–æ–∫: –í—É–∞–ª—å —Ç—å–º—ã',
          type: 'skill',
          skillId: 'shadow_veil',
          description: '–û–±—É—á–∞–µ—Ç —É–º–µ–Ω–∏—é "–í—É–∞–ª—å —Ç—å–º—ã"',
          icon: '/bat.png',
          price: 1
        }
      ]
    },
    {
      id: 'elder',
      name: '–°—Ç–∞—Ä–æ—Å—Ç–∞ –≠–¥–≤–∏–Ω',
      position: { x: 900, y: 800 }, // Moved near buildings area
      type: 'elder',
      dialogue: [
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –º–æ–ª–æ–¥–æ–π –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!',
        '–ù–∞—à–∞ –¥–µ—Ä–µ–≤–Ω—è –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏.',
        '–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?'
      ],
      quests: [
        {
          id: 'village-introduction',
          title: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–º–∏',
          description: '–ü–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –≤—Å–µ–º–∏ –∂–∏—Ç–µ–ª—è–º–∏ –¥–µ—Ä–µ–≤–Ω–∏, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º–∏.',
          status: 'available',
          giver: 'elder',
          repeatable: false,
          objectives: [
            { description: '–ü–æ–≥–æ–≤–æ—Ä–∏ —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º', completed: false },
            { description: '–ü–æ–≥–æ–≤–æ—Ä–∏ —Å –∫—É–∑–Ω–µ—Ü–æ–º', completed: false }
          ],
          rewards: {
            experience: 100,
            coins: 30
          }
        },
        {
          id: 'find-blacksmith',
          title: '–ù–∞–π—Ç–∏ –∫—É–∑–Ω–µ—Ü–∞',
          description: '–í –¥–µ—Ä–µ–≤–Ω–µ –µ—Å—Ç—å –∫—É–∑–Ω–µ—Ü, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ. –ù–∞–π–¥–∏ –µ–≥–æ!',
          status: 'locked',
          giver: 'blacksmith',
          repeatable: false,
          objectives: [
            { description: '–ù–∞–π–¥–∏ –∏ –ø–æ–≥–æ–≤–æ—Ä–∏ —Å –∫—É–∑–Ω–µ—Ü–æ–º', completed: false }
          ],
          rewards: {
            experience: 10
          }
        }
      ]
    },
    {
      id: 'blacksmith',
      name: '–ö—É–∑–Ω–µ—Ü –ì—Ä–æ–º',
      position: { x: 600, y: 700 }, // Moved near blacksmith forge
      type: 'blacksmith',
      dialogue: [
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –∫—É–∑–Ω–∏—Ü—É!',
        '–ú–Ω–µ –Ω—É–∂–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã.',
        '–ü—Ä–∏–Ω–µ—Å–∏ –º–Ω–µ —É–≥–æ–ª—å, –∏ —è –≤—ã–∫—É—é —Ç–µ–±–µ –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ä—É–∂–∏–µ!'
      ],
      quests: [
        {
          id: 'find-coal',
          title: '–ü–æ–∏—Å–∫ —É–≥–ª—è',
          description: '–ö—É–∑–Ω–µ—Ü—É –Ω—É–∂–µ–Ω —É–≥–æ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã. –ù–∞–π–¥–∏ –µ–≥–æ –≤ –ª–µ—Å—É –∑–∞ –¥–µ—Ä–µ–≤–Ω–µ–π.',
          status: 'locked',
          giver: 'blacksmith',
          repeatable: false,
          objectives: [
            { description: '–ù–∞–π–¥–∏ —É–≥–æ–ª—å –≤ –ª–µ—Å—É', completed: false },
            { description: '–í–µ—Ä–Ω–∏—Å—å –∫ –∫—É–∑–Ω–µ—Ü—É —Å —É–≥–ª–µ–º', completed: false }
          ],
          rewards: {
            experience: 75,
            items: [{
              id: 'forged-iron-sword',
              name: '–ö–æ–≤–∞–Ω—ã–π –∂–µ–ª–µ–∑–Ω—ã–π –º–µ—á',
              type: 'weapon',
              slot: 'weapon',
              stats: { damage: 18 },
              description: '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π –º–µ—á, –≤—ã–∫–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä–æ–º',
              icon: '‚öîÔ∏è'
            }]
          }
        },
        {
          id: 'ore-mining',
          title: '–î–æ–±—ã—Ç—å —Ä—É–¥—É',
          description: '–ù–∞–π–¥–∏ 3 –∫—É—Å–∫–∞ —Ä—É–¥—ã –≤ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —à–∞—Ö—Ç–∞—Ö –¥–ª—è –∫—É–∑–Ω–µ—Ü–∞.',
          status: 'available',
          giver: 'blacksmith',
          repeatable: false,
          objectives: [
            { description: '–ù–∞–π—Ç–∏ 3 –∫—É—Å–∫–∞ —Ä—É–¥—ã –≤ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —à–∞—Ö—Ç–∞—Ö (0/3)', completed: false },
            { description: '–í–µ—Ä–Ω–∏—Å—å –∫ –∫—É–∑–Ω–µ—Ü—É —Å —Ä—É–¥–æ–π', completed: false }
          ],
          rewards: {
            experience: 100,
            items: [{
              id: 'iron-sword',
              name: '–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á',
              type: 'weapon',
              slot: 'weapon',
              stats: { damage: 15 },
              description: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∂–µ–ª–µ–∑–Ω—ã–π –º–µ—á',
              icon: '/sword.png'
            }]
          }
        }
      ]
    },
    {
      id: 'mage',
      name: '–ú–∞–≥ –ê—Ä–∫–∞–¥–∏–π',
      position: { x: 1200, y: 900 },
      type: 'mage',
      dialogue: [
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, —Å–æ–±—Ä–∞—Ç –ø–æ –º–∞–≥–∏—á–µ—Å–∫–æ–º—É –∏—Å–∫—É—Å—Å—Ç–≤—É!',
        '–í–∏–∂—É, —Ç—ã –ø–æ–∑–Ω–∞–ª —Å–∏–ª—É –º–∞–≥–∏–∏.',
        '–ü–æ–∑–≤–æ–ª—å –º–Ω–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –¥—Ä–µ–≤–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.'
      ],
      visible: false
    },
    {
      id: 'scout',
      name: '–°–ª–µ–¥–æ–ø—ã—Ç –ò–≥–æ—Ä—å',
      position: { x: 700, y: 1200 },
      type: 'scout',
      dialogue: [
        '–ê—Ö, –≤–∏–∂—É –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π —É–º–µ–ª–æ–≥–æ —Ä–∞–∑–±–æ–π–Ω–∏–∫–∞!',
        '–¢—ã –æ—Å–≤–æ–∏–ª –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏ –∏ —Ö–∏—Ç—Ä–æ—Å—Ç–∏.',
        '–î–∞–≤–Ω–æ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.'
      ],
      visible: false
    },
    {
      id: 'guardian',
      name: '–°—Ç—Ä–∞–∂–Ω–∏–∫ –û–ª–µ–≥',
      position: { x: 500, y: 800 },
      type: 'guardian',
      dialogue: [
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –≤–æ–∏–Ω!',
        '–¢–≤–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è –æ—Ä—É–∂–∏–µ–º –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç.',
        '–ù–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º –∑–∞—â–∏—Ç–Ω–∏–∫–æ–º.'
      ],
      visible: false
    }
  ]);

  const [quests, setQuests] = useState<Quest[]>([]);
  const [completedQuestIds, setCompletedQuestIds] = useState<string[]>([]);

  // Handle player taking damage from enemies
  const handlePlayerTakeDamage = useCallback((damage: number) => {
    setPlayer(prev => {
      const newHealth = Math.max(0, prev.health - damage);
      if (newHealth === 0) {
        toast({
          title: "–í—ã –ø–æ–≥–∏–±–ª–∏!",
          description: "–í—ã –±—ã–ª–∏ –ø–æ–≤–µ—Ä–∂–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º",
          variant: "destructive",
          duration: 2000
        });
      } else {
        toast({
          title: "–ü–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω!",
          description: `–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${damage} –∑–¥–æ—Ä–æ–≤—å—è`,
          variant: "destructive",
          duration: 2000
        });
      }
      return {
        ...prev,
        health: newHealth
      };
    });
  }, [toast]);

  // Battle system
  const handleBattleStart = useCallback((enemy: Enemy) => {
    // Don't start battle if already in battle or not in abandoned mines
    if (battleState || gameScreen === 'battle' || currentLocation !== 'abandoned-mines') return;
    
    console.log('Starting battle with', enemy.name, 'health:', enemy.health);
    
    setBattleState({
      player,
      enemy,
      location: currentLocation,
      playerAction: null,
      turn: 'player',
      skillCooldown: 0
    });
    setGameScreen('battle');
    setBattleLog([`–ë–æ–π —Å ${enemy.name} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!`]);
    setDamageTexts([]);
  }, [player, currentLocation, battleState, gameScreen]);

  // Loot generation function
  const generateLoot = useCallback((enemyType: 'rat' | 'bat') => {
    const lootItems: Item[] = [];
    
    if (enemyType === 'rat') {
      // –ö—Ä—ã—Å–∞ –ª—É—Ç
      const ratTrashItems = [
        { name: '–†–∂–∞–≤—ã–π –≥–≤–æ–∑–¥—å', sellPrice: 1, basePrice: 3, icon: '/trash_nail.png', chance: 0.2 },
        { name: '–°—Ç–∞—Ä–∞—è –º–æ–Ω–µ—Ç–∞', sellPrice: 4, basePrice: 8, icon: '/trash_old_coin.png', chance: 0.1 },
        { name: '–ö—É—Å–æ–∫ —Ä—É–¥—ã', sellPrice: 6, basePrice: 12, icon: '/healthpotion.png', chance: 0.05 },
        { name: '–û–±–ª–æ–º–æ–∫ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞', sellPrice: 7, basePrice: 15, icon: '/healthpotion.png', chance: 0.03 },
        { name: '–ë–ª–µ—Å—Ç—è—â–∏–π –∫–∞–º–µ—à–µ–∫', sellPrice: 12, basePrice: 25, icon: '/healthpotion.png', chance: 0.01 },
        { name: '–†–µ–¥–∫–∏–π —Å–∞–º–æ—Ü–≤–µ—Ç', sellPrice: 25, basePrice: 50, icon: '/trash_rare_gem.png', chance: 0.005 }
      ];

      const ratEquipmentItems = [
        { 
          name: '–†–∞–±–æ—á–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏', 
          sellPrice: 15, 
          basePrice: 30, 
          type: 'armor', 
          slot: 'weapon',
          stats: { damage: 2 },
          description: '–ü—Ä–æ—á–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã',
          icon: '/weapon_empty.png',
          chance: 0.05 
        },
        { 
          name: '–®–ª–µ–º —à–∞—Ö—Ç—ë—Ä–∞', 
          sellPrice: 22, 
          basePrice: 45, 
          type: 'armor', 
          slot: 'head',
          stats: { armor: 3, health: 10 },
          description: '–ó–∞—â–∏—Ç–Ω—ã–π —à–ª–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —à–∞—Ö—Ç–∞—Ö',
          icon: '/helmet_empty.png',
          chance: 0.05 
        },
        { 
          name: '–£–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Å–∞–ø–æ–≥–∏', 
          sellPrice: 17, 
          basePrice: 35, 
          type: 'armor', 
          slot: 'legs',
          stats: { armor: 2, health: 5 },
          description: '–°–∞–ø–æ–≥–∏ —Å–æ —Å—Ç–∞–ª—å–Ω—ã–º–∏ –Ω–æ—Å–∫–∞–º–∏',
          icon: '/boots_empty.png',
          chance: 0.05 
        }
      ];

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É—Å–æ—Ä–Ω—ã–π –ª—É—Ç
      ratTrashItems.forEach((trash, index) => {
        if (Math.random() < trash.chance) {
          lootItems.push({
            id: `rat-trash-${index}-${Date.now()}`,
            name: trash.name,
            type: 'misc',
            description: '–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—Ü—É',
            icon: trash.icon,
            price: trash.basePrice,
            stackable: true,
            maxStack: 20
          });
        }
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
      ratEquipmentItems.forEach((equip, index) => {
        if (Math.random() < equip.chance) {
          lootItems.push({
            id: `rat-equipment-${index}-${Date.now()}`,
            name: equip.name,
            type: equip.type as 'weapon' | 'armor',
            slot: equip.slot as 'head' | 'chest' | 'legs' | 'weapon' | 'shield',
            stats: equip.stats,
            description: equip.description,
            icon: equip.icon,
            price: equip.basePrice,
            stackable: false
          });
        }
      });

    } else if (enemyType === 'bat') {
      // –õ–µ—Ç—É—á–∞—è –º—ã—à—å –ª—É—Ç
      const batTrashItems = [
        { name: '–ü–æ—Ä–≤–∞–Ω–Ω–æ–µ –∫—Ä—ã–ª–æ', sellPrice: 1, basePrice: 3, icon: '/healthpotion.png', chance: 0.25 },
        { name: '–û—Å–∫–æ–ª–æ–∫ –∫–æ—Å—Ç–∏', sellPrice: 3, basePrice: 6, icon: '/healthpotion.png', chance: 0.15 },
        { name: '–ö–∞–ø–ª—è —Ç—ë–º–Ω–æ–π —Å–º–æ–ª—ã', sellPrice: 5, basePrice: 10, icon: '/healthpotion.png', chance: 0.08 },
        { name: '–§—Ä–∞–≥–º–µ–Ω—Ç —á—ë—Ä–Ω–æ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞', sellPrice: 9, basePrice: 18, icon: '/healthpotion.png', chance: 0.03 },
        { name: '–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–æ', sellPrice: 18, basePrice: 40, icon: '/healthpotion.png', chance: 0.01 }
      ];

      const batEquipmentItems = [
        { 
          name: '–ö–æ–∂–∞–Ω—ã–π –ø–ª–∞—â', 
          sellPrice: 20, 
          basePrice: 45, 
          type: 'armor', 
          slot: 'chest',
          stats: { armor: 4, health: 8 },
          description: '–õ—ë–≥–∫–∏–π –ø–ª–∞—â –∏–∑ –∫–æ–∂–∏ –ª–µ—Ç—É—á–µ–π –º—ã—à–∏',
          icon: '/armor_empty.png',
          chance: 0.04 
        },
        { 
          name: '–ê–º—É–ª–µ—Ç –Ω–æ—á–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è', 
          sellPrice: 40, 
          basePrice: 80, 
          type: 'misc', 
          description: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∞–º—É–ª–µ—Ç, —É–ª—É—á—à–∞—é—â–∏–π –∑—Ä–µ–Ω–∏–µ –≤ —Ç–µ–º–Ω–æ—Ç–µ',
          icon: '/amulet_empty.png',
          chance: 0.02 
        }
      ];

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É—Å–æ—Ä–Ω—ã–π –ª—É—Ç
      batTrashItems.forEach((trash, index) => {
        if (Math.random() < trash.chance) {
          lootItems.push({
            id: `bat-trash-${index}-${Date.now()}`,
            name: trash.name,
            type: 'misc',
            description: '–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—Ü—É',
            icon: trash.icon,
            price: trash.basePrice,
            stackable: true,
            maxStack: 20
          });
        }
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
      batEquipmentItems.forEach((equip, index) => {
        if (Math.random() < equip.chance) {
          lootItems.push({
            id: `bat-equipment-${index}-${Date.now()}`,
            name: equip.name,
            type: equip.type as 'weapon' | 'armor' | 'misc',
            slot: equip.slot as 'head' | 'chest' | 'legs' | 'weapon' | 'shield',
            stats: equip.stats,
            description: equip.description,
            icon: equip.icon,
            price: equip.basePrice,
            stackable: false
          });
        }
      });
    }
    
    return lootItems;
  }, []);

  const handleBattleEnd = useCallback(() => {
    setBattleState(null);
    setBattleResult(null);
    setGameScreen('game');
    setBattleLog([]);
    setDamageTexts([]);
  }, []);

  const addDamageText = useCallback((amount: number, target: 'player' | 'enemy', type: 'damage' | 'heal' | 'defend' | 'skill' = 'damage') => {
    const id = Date.now().toString() + Math.random().toString();
    setDamageTexts(prev => [...prev, { id, amount, target, type }]);
    
    // Remove damage text after animation
    setTimeout(() => {
      setDamageTexts(prev => prev.filter(dt => dt.id !== id));
    }, 2000);
  }, []);

  const addBattleLog = useCallback((message: string) => {
    setBattleLog(prev => [...prev, message]);
  }, []);

  const handleBattleAttack = useCallback(() => {
    if (!battleState || battleState.turn !== 'player') return;
    
    console.log('Battle attack started, enemy health:', battleState.enemy.health);
    
    // Store all battle data before any state updates
    const currentBattleState = battleState;
    const enemyName = currentBattleState.enemy.name;
    const enemyDamage = currentBattleState.enemy.damage;
    const currentEnemyHealth = currentBattleState.enemy.health;
    const currentPlayerHealth = player.health;
    
    // Calculate damage with new stat system
    const baseDamage = 5 + player.stats.strength * 0.5; // Base damage from strength
    const weaponModifier = player.equipment.weapon?.stats?.damage || 0; // Weapon adds damage
    const randomModifier = 0.8 + Math.random() * 0.4; // 80-120% variance
    const rawDamage = Math.floor((baseDamage + weaponModifier) * randomModifier);
    
    // Apply enemy damage reduction
    const enemyReduction = battleState.enemy.damageReduction || 0;
    const afterEnemyReduction = rawDamage * (1 - enemyReduction / 100);
    
    // Apply location modifier (mines reduce damage by 2%)
    const locationModifier = currentLocation === 'abandoned-mines' ? 0.98 : 1;
    const finalBaseDamage = Math.floor(afterEnemyReduction * locationModifier);
    
    // Apply new stat effects (luck for crit, enemy has no stats so no dodge/block)
    const damageResult = calculateDamage(finalBaseDamage, player.stats.luck, 0, 0);
    const totalDamage = damageResult.damage;
    
    const newEnemyHealth = Math.max(0, currentEnemyHealth - totalDamage);
    
    console.log('Damage dealt:', totalDamage, 'New enemy health:', newEnemyHealth);
    
    addDamageText(totalDamage, 'enemy', 'damage');
    const critText = damageResult.isCrit ? ' –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–ù!' : '';
    addBattleLog(`–í—ã –∞—Ç–∞–∫—É–µ—Ç–µ ${enemyName} –∏ –Ω–∞–Ω–æ—Å–∏—Ç–µ ${totalDamage} —É—Ä–æ–Ω–∞!${critText}`);
    
    if (newEnemyHealth <= 0) {
      // Enemy defeated
      addBattleLog(`${enemyName} –ø–æ–≤–µ—Ä–∂–µ–Ω!`);
      
      // Generate battle result
      const experienceGained = Math.floor(Math.random() * 20) + 10;
      const coinsGained = Math.floor(Math.random() * 10) + 5;
      const lootItems = generateLoot(battleState.enemy.type);
      
      setBattleResult({
        victory: true,
        experienceGained,
        coinsGained,
        lootItems
      });
      
      setTimeout(() => {
        setGameScreen('battle-victory');
        setPlayer(prev => ({
          ...prev,
          experience: prev.experience + experienceGained,
          coins: prev.coins + coinsGained,
          inventory: addItemsToInventory(prev.inventory, lootItems)
        }));
      }, 1500);
      return;
    }
    
    // Update battle state with new enemy health IMMEDIATELY
    setBattleState(prev => {
      const newState = prev ? {
        ...prev,
        enemy: { ...prev.enemy, health: newEnemyHealth },
        turn: 'enemy' as const
      } : null;
      console.log('Updated battle state, new enemy health:', newState?.enemy.health);
      return newState;
    });
    
    // Enemy attacks after delay
    setTimeout(() => {
      console.log('Enemy counterattack');
      
      // Calculate enemy damage with player defensive stats
      const enemyDamageResult = calculateDamage(enemyDamage, 0, player.stats.agility, player.stats.strength);
      
      setPlayer(prev => {
        const newPlayerHealth = Math.max(0, prev.health - enemyDamageResult.damage);
        // Also reduce all skill cooldowns
        const newCooldowns = { ...prev.skillCooldowns };
        Object.keys(newCooldowns).forEach(skillId => {
          if (newCooldowns[skillId] > 0) {
            newCooldowns[skillId] -= 1;
          }
        });
        console.log('Player health before:', prev.health, 'damage:', enemyDamageResult.damage, 'after:', newPlayerHealth);
        return {
          ...prev,
          health: newPlayerHealth,
          skillCooldowns: newCooldowns
        };
      });
      
      addDamageText(enemyDamageResult.damage, 'player', 'damage');
      
      let battleMessage = '';
      if (enemyDamageResult.isDodged) {
        battleMessage = `${enemyName} –∞—Ç–∞–∫—É–µ—Ç, –Ω–æ –≤—ã —É–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ—Å—å!`;
      } else if (enemyDamageResult.isBlocked) {
        battleMessage = `${enemyName} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDamageResult.damage} —É—Ä–æ–Ω–∞! –í—ã —á–∞—Å—Ç–∏—á–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç–µ –∞—Ç–∞–∫—É!`;
      } else {
        battleMessage = `${enemyName} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDamageResult.damage} —É—Ä–æ–Ω–∞!`;
      }
      addBattleLog(battleMessage);
      
      // Check if player is defeated using a ref to get current health
      setTimeout(() => {
        setPlayer(current => {
          if (current.health <= 0) {
            addBattleLog("–í—ã –ø–∞–¥–∞–µ—Ç–µ –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è...");
            setTimeout(() => {
              setGameScreen('battle-defeat');
            }, 1500);
          }
          return current;
        });
      }, 100);
      
      setBattleState(prev => prev ? {
        ...prev,
        turn: 'player' as const
      } : null);
    }, 1000);
  }, [battleState, player.equipment.weapon, player.health, addDamageText, addBattleLog]);

  const handleBattleSkill = useCallback((skillId: string) => {
    if (!battleState || battleState.turn !== 'player') return;

    const skill = getSkillById(skillId);
    if (!skill) {
      addBattleLog('–£–º–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      return;
    }

    if (player.mana < skill.manaCost) {
      addBattleLog(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ${skill.name}!`);
      return;
    }

    // Check individual skill cooldown
    const skillCooldown = player.skillCooldowns[skillId] || 0;
    if (skillCooldown > 0) {
      addBattleLog(`–£–º–µ–Ω–∏–µ "${skill.name}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û—Ç–∫–∞—Ç: ${skillCooldown} —Ö–æ–¥(–æ–≤).`);
      return;
    }

    // Track skill usage for NPC visibility
    setPlayer(prevPlayer => ({
      ...prevPlayer,
      skillUsageStats: {
        ...prevPlayer.skillUsageStats,
        [skill.class]: prevPlayer.skillUsageStats[skill.class] + 1
      }
    }));

    const currentEnemyHealth = battleState.enemy.health;
    const enemyName = battleState.enemy.name;
    const enemyDamage = battleState.enemy.damage;

    // Calculate skill damage
    let skillDamage = skill.damage;
    const weaponDamage = player.equipment.weapon?.stats?.damage || 0;
    const strengthBonus = Math.floor(player.stats.strength / 2);
    skillDamage += weaponDamage + strengthBonus;

    // Apply damage reduction
    const enemyReduction = battleState.enemy.damageReduction || 0;
    const finalDamage = Math.max(1, Math.floor(skillDamage * (1 - enemyReduction / 100)));

    // Special skill effects with status messages
    let statusMessage = '';
    if (skill.id === 'heavy_strike' && Math.random() < 0.8) {
      statusMessage = '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ–≥–ª—É—à–µ–Ω –Ω–∞ 1 —Ö–æ–¥!';
    } else if (skill.id === 'sand_in_eyes') {
      statusMessage = '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Å–ª–µ–ø–ª–µ–Ω –Ω–∞ 1 —Ö–æ–¥!';
    } else if (skill.id === 'fury_cut' && Math.random() < 0.8) {
      statusMessage = '–ù–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞–ª–æ–∂–µ–Ω–æ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ –Ω–∞ 2 —Ö–æ–¥–∞!';
    } else if (skill.id === 'fire_burst' && Math.random() < 0.8) {
      statusMessage = '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–¥–∂–∂–µ–Ω –Ω–∞ 2 —Ö–æ–¥–∞! –¶–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞ –æ—Ç –æ–≥–Ω—è!';
    } else if (skill.id === 'frost_chains') {
      statusMessage = '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∑–∞–º–æ—Ä–æ–∂–µ–Ω! –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è —Å–Ω–∏–∂–µ–Ω!';
    }

    let isHealing = false;
    if (skill.id === 'heal') {
      const healAmount = skill.damage + Math.floor(player.stats.intelligence * 2);
      setPlayer(prev => ({
        ...prev,
        health: Math.min(prev.maxHealth, prev.health + healAmount),
        mana: prev.mana - skill.manaCost,
        skillCooldowns: {
          ...prev.skillCooldowns,
          [skillId]: skill.cooldown
        }
      }));
      
      addDamageText(healAmount, 'player', 'heal');
      addBattleLog(`–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ "${skill.name}" –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ ${healAmount} –∑–¥–æ—Ä–æ–≤—å—è!`);
      isHealing = true;
    } else if (skill.id === 'mana_spark') {
      const manaRestored = 20 + Math.floor(player.stats.intelligence);
      setPlayer(prev => ({
        ...prev,
        mana: Math.min(prev.maxMana, prev.mana + manaRestored),
        skillCooldowns: {
          ...prev.skillCooldowns,
          [skillId]: skill.cooldown
        }
      }));
      
      addDamageText(manaRestored, 'player', 'heal');
      addBattleLog(`–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ "${skill.name}" –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ ${manaRestored} –º–∞–Ω—ã! –°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ —É—Å–∏–ª–µ–Ω–∞!`);
      statusMessage = '–°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ —É—Å–∏–ª–µ–Ω–∞ –º–∞–≥–∏–µ–π!';
      isHealing = true;
    } else if (skill.id === 'shadow_veil') {
      setPlayer(prev => ({
        ...prev,
        mana: prev.mana - skill.manaCost,
        skillCooldowns: {
          ...prev.skillCooldowns,
          [skillId]: skill.cooldown
        }
      }));
      
      addBattleLog(`–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ "${skill.name}" –∏ –æ–∫—É—Ç—ã–≤–∞–µ—Ç–µ—Å—å —Ç–µ–Ω—è–º–∏!`);
      statusMessage = '–®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 40% –Ω–∞ 2 —Ö–æ–¥–∞!';
      isHealing = true;
    } else {
      // Reduce player mana and set skill cooldown
      setPlayer(prev => ({
        ...prev,
        mana: prev.mana - skill.manaCost,
        skillCooldowns: {
          ...prev.skillCooldowns,
          [skillId]: skill.cooldown
        }
      }));
      
      addDamageText(finalDamage, 'enemy', 'skill');
      addBattleLog(`–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ "${skill.name}" –∏ –Ω–∞–Ω–æ—Å–∏—Ç–µ ${finalDamage} —É—Ä–æ–Ω–∞!`);
    }

    // Log status effect if applied
    if (statusMessage) {
      addBattleLog(statusMessage);
    }

    if (!isHealing) {
      // Check if enemy is defeated
      if (currentEnemyHealth - finalDamage <= 0) {
        addBattleLog(`${enemyName} –ø–æ–≤–µ—Ä–∂–µ–Ω!`);
        const experienceGained = Math.floor(Math.random() * 20) + 15;
        const coinsGained = Math.floor(Math.random() * 10) + 5;
        const lootItems = generateLoot(battleState.enemy.type);
        setBattleResult({ victory: true, experienceGained, coinsGained, lootItems });
        setTimeout(() => {
          setGameScreen('battle-victory');
          setPlayer(prev => ({
            ...prev,
            experience: prev.experience + experienceGained,
            coins: prev.coins + coinsGained,
            inventory: addItemsToInventory(prev.inventory, lootItems)
          }));
        }, 1500);
        return;
      }

      // Update battle state with damage
      setBattleState(prev => prev ? {
        ...prev,
        enemy: { ...prev.enemy, health: Math.max(0, currentEnemyHealth - finalDamage) },
        turn: 'enemy',
        playerAction: 'skill'
      } : null);
    }

    // Enemy turn after player uses skill
    setTimeout(() => {
      // Always perform enemy counter-attack (unless stunned or similar status effects)
      const enemyDamageResult = calculateDamage(enemyDamage, 0, player.stats.agility, player.stats.strength);
      
      setPlayer(prev => {
        const newPlayerHealth = Math.max(0, prev.health - enemyDamageResult.damage);
        // Also reduce all skill cooldowns
        const newCooldowns = { ...prev.skillCooldowns };
        Object.keys(newCooldowns).forEach(skillId => {
          if (newCooldowns[skillId] > 0) {
            newCooldowns[skillId] -= 1;
          }
        });
        return {
          ...prev,
          health: newPlayerHealth,
          skillCooldowns: newCooldowns
        };
      });
      
      addDamageText(enemyDamageResult.damage, 'player', 'damage');
      
      let battleMessage = '';
      if (enemyDamageResult.isDodged) {
        battleMessage = `${enemyName} –∞—Ç–∞–∫—É–µ—Ç, –Ω–æ –≤—ã —É–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ—Å—å!`;
      } else if (enemyDamageResult.isBlocked) {
        battleMessage = `${enemyName} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDamageResult.damage} —É—Ä–æ–Ω–∞! –í—ã —á–∞—Å—Ç–∏—á–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç–µ –∞—Ç–∞–∫—É!`;
      } else {
        battleMessage = `${enemyName} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDamageResult.damage} —É—Ä–æ–Ω–∞!`;
      }
      addBattleLog(battleMessage);

      setTimeout(() => {
        setPlayer(current => {
          if (current.health <= 0) {
            addBattleLog('–í—ã –ø–∞–¥–∞–µ—Ç–µ –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è...');
            setTimeout(() => setGameScreen('battle-defeat'), 1500);
          }
          return current;
        });
        setBattleState(prev => prev ? { ...prev, turn: 'player' } : null);
      }, 100);
    }, 1000);
  }, [battleState, player.equipment.weapon, player.mana, player.skillCooldowns, addDamageText, addBattleLog, setPlayer]);

  // Function to check and update NPC visibility based on conditions
  const updateNPCVisibility = useCallback(() => {
    setNpcs(prevNpcs => prevNpcs.map(npc => {
      if (npc.visible === true) return npc; // Already visible, no need to check

      // Count learned skills for each class
      const learnedSkills = availableSkills.filter(skill => skill.unlocked);
      const warriorSkills = learnedSkills.filter(skill => skill.class === 'warrior').length;
      const rogueSkills = learnedSkills.filter(skill => skill.class === 'rogue').length;
      const mageSkills = learnedSkills.filter(skill => skill.class === 'mage').length;

      switch (npc.id) {
        case 'mage':
          // –º–∞–≥: –∏–≥—Ä–æ–∫ –∏–∑—É—á–∏–ª 2 –∏ –±–æ–ª—å—à–µ —É–º–µ–Ω–∏–π —Å –∫–ª–∞—Å—Å–æ–º –º–∞–≥–∞ –∏ 1 –∏–ª–∏ –±–æ–ª–µ–µ —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —É–º–µ–Ω–∏–µ –º–∞–≥–∞ –≤ –±–æ—é
          if (mageSkills >= 2 && player.skillUsageStats.mage >= 1) {
            return { ...npc, visible: true };
          }
          break;
        case 'scout':
          // —Å–ª–µ–¥–æ–ø—ã—Ç: –∏–≥—Ä–æ–∫ –∏–∑—É—á–∏–ª 2 –∏ –±–æ–ª—å—à–µ —É–º–µ–Ω–∏–π —Å –∫–ª–∞—Å—Å–æ–º —Ä–∞–∑–±–æ–π–Ω–∏–∫–∞ –∏ 1 –∏–ª–∏ –±–æ–ª–µ–µ —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —É–º–µ–Ω–∏–µ —Ä–∞–∑–±–æ–π–Ω–∏–∫–∞ –≤ –±–æ—é
          if (rogueSkills >= 2 && player.skillUsageStats.rogue >= 1) {
            return { ...npc, visible: true };
          }
          break;
        case 'guardian':
          // —Å—Ç—Ä–∞–∂–Ω–∏–∫: –∏–≥—Ä–æ–∫ –∏–∑—É—á–∏–ª 2 –∏ –±–æ–ª—å—à–µ —É–º–µ–Ω–∏–π —Å –∫–ª–∞—Å—Å–æ–º –≤–æ–∏–Ω–∞ –∏ 1 –∏–ª–∏ –±–æ–ª–µ–µ —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —É–º–µ–Ω–∏–µ –≤–æ–∏–Ω–∞ –≤ –±–æ—é
          if (warriorSkills >= 2 && player.skillUsageStats.warrior >= 1) {
            return { ...npc, visible: true };
          }
          break;
      }
      return npc;
    }));
  }, [player.skillUsageStats]);

  // Update NPC visibility when skill usage stats change
  useEffect(() => {
    updateNPCVisibility();
  }, [updateNPCVisibility]);

  const handleBattleUseItem = useCallback((item: Item) => {
    if (!battleState || battleState.turn !== 'player') return;
    
    // Use item logic
    if (item.name === '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è') {
      const healAmount = 50;
      setPlayer(prev => ({
        ...prev,
        health: Math.min(prev.maxHealth, prev.health + healAmount),
        inventory: removeItemFromInventory(prev.inventory, item.id, 1)
      }));
      
      addDamageText(healAmount, 'player', 'heal');
      addBattleLog(`–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ${item.name} –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ ${healAmount} –∑–¥–æ—Ä–æ–≤—å—è!`);
    }
    
    // Enemy's turn
    setBattleState(prev => prev ? {
      ...prev,
      turn: 'enemy'
    } : null);
    
    setTimeout(() => {
      const enemyDamage = battleState.enemy.damage;
      const newPlayerHealth = Math.max(0, player.health - enemyDamage);
      
      setPlayer(prev => ({
        ...prev,
        health: newPlayerHealth
      }));
      
      setBattleState(prev => prev ? {
        ...prev,
        turn: 'player'
      } : null);
      
      addDamageText(enemyDamage, 'player', 'damage');
      addBattleLog(`${battleState.enemy.name} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDamage} —É—Ä–æ–Ω–∞!`);
      
      // Check if player is defeated
      if (newPlayerHealth <= 0) {
        addBattleLog("–í—ã –ø–∞–¥–∞–µ—Ç–µ –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è...");
        setTimeout(() => {
          setGameScreen('battle-defeat');
        }, 1500);
      }
    }, 1000);
  }, [battleState, addDamageText, addBattleLog, player.health]);

  // Handle battle flee - can be used at any time
  const handleBattleFlee = useCallback(() => {
    if (!battleState) return;
    
    // Prevent multiple flee attempts
    if (battleState.playerAction === 'fleeing') return;
    
    console.log('Attempting to flee from battle');
    addBattleLog("–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–±–µ–∂–∞—Ç—å...");
    
    // Mark as fleeing to prevent multiple attempts
    setBattleState(prev => prev ? {
      ...prev,
      playerAction: 'fleeing'
    } : null);
    
    // 70% chance to successfully flee
    if (Math.random() < 0.7) {
      addBattleLog("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–≥–∞–µ—Ç–µ –∏–∑ –±–æ—è!");
      setTimeout(() => {
        console.log('Successfully fled, ending battle');
        
        // Move player to a safe position away from enemies
        if (currentLocation === 'abandoned-mines') {
          // Move to entrance area of mines (safe zone)
          setPlayer(prev => ({
            ...prev,
            position: { x: 50, y: 100 },
            targetPosition: { x: 50, y: 100 }
          }));
        }
        
        handleBattleEnd();
      }, 1000);
    } else {
      addBattleLog("–ü–æ–±–µ–≥ –Ω–µ —É–¥–∞–ª—Å—è! –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç!");
      
      // Store enemy info before state updates
      const currentBattleState = battleState;
      const enemyName = currentBattleState.enemy.name;
      const enemyDamage = currentBattleState.enemy.damage;
      const currentPlayerHealth = player.health;
      
      // Enemy gets a free attack
      setTimeout(() => {
        console.log('Failed flee, enemy attacks');
        
        // Calculate enemy damage with player defensive stats
        const enemyDamageResult = calculateDamage(enemyDamage, 0, player.stats.agility, player.stats.strength);
        const newPlayerHealth = Math.max(0, currentPlayerHealth - enemyDamageResult.damage);
        
        setPlayer(prev => ({
          ...prev,
          health: newPlayerHealth
        }));
        
        addDamageText(enemyDamageResult.damage, 'player', 'damage');
        
        let fleeMessage = '';
        if (enemyDamageResult.isDodged) {
          fleeMessage = `${enemyName} –∞—Ç–∞–∫—É–µ—Ç, –Ω–æ –≤—ã —É–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ—Å—å!`;
        } else if (enemyDamageResult.isBlocked) {
          fleeMessage = `${enemyName} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDamageResult.damage} —É—Ä–æ–Ω–∞! –í—ã —á–∞—Å—Ç–∏—á–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç–µ –∞—Ç–∞–∫—É!`;
        } else {
          fleeMessage = `${enemyName} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDamageResult.damage} —É—Ä–æ–Ω–∞!`;
        }
        addBattleLog(fleeMessage);
        
        // Check if player is defeated
        if (newPlayerHealth <= 0) {
          addBattleLog("–í—ã –ø–∞–¥–∞–µ—Ç–µ –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è...");
          setTimeout(() => {
            setGameScreen('battle-defeat');
          }, 1500);
          return;
        }
        
        // Set turn back to player and reset action
        setBattleState(prev => prev ? {
          ...prev,
          turn: 'player',
          playerAction: null
        } : null);
      }, 1000);
    }
  }, [battleState, handleBattleEnd, addBattleLog, addDamageText, player.health]);

  // Handle battle defeat
  const handleBattleDefeat = useCallback(() => {
    // Reset player health and teleport to village
    setPlayer(prev => ({
      ...prev,
      health: Math.floor(prev.maxHealth * 0.5), // Half health after defeat
      position: { x: 900, y: 800 }, // Elder's position in village
      targetPosition: { x: 900, y: 800 }
    }));
    
    setCurrentLocation('village');
    handleBattleEnd();
    
    // Show recovery message
    setTimeout(() => {
      toast({
        title: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
        description: "–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ —Å–µ–±—è –≤ –¥–æ–º–µ —Å—Ç–∞—Ä–æ—Å—Ç—ã",
        duration: 3000
      });
    }, 500);
  }, [handleBattleEnd, toast]);

  // Enemy system (only in abandoned mines)
  const { enemies, attackEnemy, removeEnemy } = useEnemySystem({
    player,
    onPlayerTakeDamage: currentLocation === 'abandoned-mines' ? handlePlayerTakeDamage : () => {},
    onBattleStart: handleBattleStart,
    isInBattle: gameScreen === 'battle' || battleState !== null
  });

  // Handle battle victory
  const handleBattleVictory = useCallback(() => {
    // Remove defeated enemy from the map and schedule respawn
    if (battleState) {
      removeEnemy(battleState.enemy.id);
    }
    handleBattleEnd();
  }, [handleBattleEnd, battleState, removeEnemy]);

  // Enemy click removed - no attacks outside battle

  // Regeneration effect with stats - only when not in battle
  useEffect(() => {
    const regenInterval = setInterval(() => {
      // Don't regenerate HP/mana during battle
      if (battleState) return;
      
      setPlayer(prev => {
        const healthRegen = calculateHealthRegen(prev.stats.constitution);
        const manaRegen = calculateManaRegen(prev.stats.intelligence);
        
        return {
          ...prev,
          health: Math.min(prev.maxHealth, prev.health + Math.max(1, healthRegen)),
          mana: Math.min(prev.maxMana, prev.mana + Math.max(1, manaRegen))
        };
      });
    }, 3000);

    return () => clearInterval(regenInterval);
  }, [player.stats.constitution, player.stats.intelligence, battleState]);

  // Handle stat point allocation
  const handleAllocatePoint = useCallback((stat: keyof Player['stats']) => {
    if (player.unallocatedPoints <= 0) return;

    setPlayer(prev => ({
      ...prev,
      stats: {
        ...prev.stats,
        [stat]: prev.stats[stat] + 1
      },
      unallocatedPoints: prev.unallocatedPoints - 1
    }));

    toast({
      title: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∞!",
      description: `–£–≤–µ–ª–∏—á–µ–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${stat === 'strength' ? '–°–∏–ª–∞' : stat === 'agility' ? '–õ–æ–≤–∫–æ—Å—Ç—å' : stat === 'intelligence' ? '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç' : stat === 'constitution' ? '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ' : '–£–¥–∞—á–∞'}`,
      duration: 2000
    });
  }, [player.unallocatedPoints, toast]);

  // Update player stats when leveling up
  useEffect(() => {
    const experienceForLevel = player.level * 100;
    if (player.experience >= experienceForLevel) {
      const newLevel = Math.floor(player.experience / 100) + 1;
      const levelGained = newLevel - player.level;
      
      if (levelGained > 0) {
        const basePoints = levelGained; // 1 point per level
        const bonusPoints = Math.floor(newLevel / 10) * 5 - Math.floor(player.level / 10) * 5; // Bonus points for reaching level milestones
        const totalPoints = basePoints + bonusPoints;
        
        setPlayer(prev => ({
          ...prev,
          level: newLevel,
          unallocatedPoints: prev.unallocatedPoints + totalPoints,
          maxHealth: prev.maxHealth + (prev.stats.constitution * 2), // Constitution affects health
          maxMana: prev.maxMana + (prev.stats.intelligence * 1), // Intelligence affects mana
        }));

        toast({
          title: "–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!",
          description: `–£—Ä–æ–≤–µ–Ω—å ${newLevel}! –ü–æ–ª—É—á–µ–Ω–æ ${totalPoints} –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.`,
          duration: 2000
        });
      }
    }
  }, [player.experience, player.level, player.stats.constitution, player.stats.intelligence, toast]);

  // Resource nodes regeneration
  useEffect(() => {
    const resourceRegenInterval = setInterval(() => {
      setResourceNodes(prev => {
        const now = Date.now();
        const REGEN_TIME = 5 * 60 * 1000; // 5 minutes
        
        return {
          coal: {
            count: now - prev.coal.lastRegen >= REGEN_TIME 
              ? Math.floor(Math.random() * 4) + 1 
              : prev.coal.count,
            lastRegen: now - prev.coal.lastRegen >= REGEN_TIME ? now : prev.coal.lastRegen
          },
          ore: {
            count: now - prev.ore.lastRegen >= REGEN_TIME 
              ? Math.floor(Math.random() * 4) + 1 
              : prev.ore.count,
            lastRegen: now - prev.ore.lastRegen >= REGEN_TIME ? now : prev.ore.lastRegen
          }
        };
      });
    }, 30000); // Check every 30 seconds

    return () => clearInterval(resourceRegenInterval);
  }, []);

  const handlePlayerMove = useCallback((newPosition: { x: number; y: number }) => {
    setPlayer(prev => ({
      ...prev,
      position: newPosition,
      targetPosition: newPosition
    }));
  }, []);

  // Collision detection
  const isColliding = useCallback((x: number, y: number) => {
    // No-clip cheat - disable all collisions
    if (isNoClipCheatEnabled) {
      return false;
    }
    
    if (currentLocation === 'village') {
      // Forest collisions - 200px from each edge
      // Top forest
      if (y >= 0 && y <= 200) {
        return true;
      }
      
      // Bottom forest  
      if (y >= 1800 && y <= 2000) {
        return true;
      }
      
      // Left forest
      if (x >= 0 && x <= 200 && y >= 200 && y <= 1800) {
        return true;
      }
      
      // Right forest
      if (x >= 1800 && x <= 2000 && y >= 200 && y <= 1800) {
        return true;
      }
      
      // Fountain collision - based on fountain image boundaries (64x64 centered at 1000,800)
      if (x >= 968 && x <= 1032 && y >= 768 && y <= 832) {
        return true;
      }
      
      // Fence collisions
      // Upper fence: from 500/500 to 900/500 (left part)
      if (x >= 500 && x <= 900 && y >= 500 && y <= 564) {
        return true;
      }
      
      // Upper fence: from 1100/500 to 1500/500 (right part)  
      if (x >= 1100 && x <= 1500 && y >= 500 && y <= 564) {
        return true;
      }
      
      // Lower fence: from 500/1500 to 1500/1500  
      if (x >= 500 && x <= 1500 && y >= 1500 && y <= 1564) {
        return true;
      }
      
      // Left fence: from 500/500 to 500/1500
      if (x >= 468 && x <= 532 && y >= 500 && y <= 1500) {
        return true;
      }
      
      // Right fence: from 1500/500 to 1500/1500
      if (x >= 1468 && x <= 1532 && y >= 500 && y <= 1500) {
        return true;
      }
    } else if (currentLocation === 'abandoned-mines') {
      // Mines labyrinth collision: points inside any wall rectangle are blocked
      for (const r of minesObstacles) {
        if (x >= r.x && x <= r.x + r.w && y >= r.y && y <= r.y + r.h) {
          return true;
        }
      }
    }
    return false;
  }, [currentLocation, isNoClipCheatEnabled]);

  // Find nearest safe position not inside walls (mines)
  const findSafePositionNear = useCallback((x: number, y: number) => {
    if (currentLocation !== 'abandoned-mines') return { x, y };
    const step = 10;
    const maxRadius = 300;
    const inWall = (px: number, py: number) => {
      for (const r of minesObstacles) {
        if (px >= r.x && px <= r.x + r.w && py >= r.y && py <= r.y + r.h) return true;
      }
      return false;
    };
    if (!inWall(x, y)) return { x, y };
    for (let radius = step; radius <= maxRadius; radius += step) {
      for (let angle = 0; angle < Math.PI * 2; angle += Math.PI / 8) {
        const px = Math.max(40, Math.min(1960, Math.round(x + Math.cos(angle) * radius)));
        const py = Math.max(40, Math.min(1960, Math.round(y + Math.sin(angle) * radius)));
        if (!inWall(px, py)) return { x: px, y: py };
      }
    }
    // Fallback to a known open tile near entrance
    return { x: 140, y: 140 };
  }, [currentLocation]);

  const handleJoystickMove = useCallback((direction: { x: number; y: number } | null) => {
    if (!direction) {
      setPlayer(prev => ({ ...prev, isMoving: false }));
      return;
    }

    // Block movement when menu is open
    if (activeMenu !== 'none') {
      return;
    }

    const moveSpeed = calculateMovementSpeed(player.stats.agility) / 100 * 2.5; // Convert to movement units
    
    setPlayer(prev => {
      const { x, y } = prev.position;
      
      // Calculate new position with smoother increments
      let newX = x + (direction.x * moveSpeed);
      let newY = y + (direction.y * moveSpeed);
      
      // Boundary constraints (different for village vs mines)
      const minBound = currentLocation === 'village' ? 200 : 40;
      const maxBound = currentLocation === 'village' ? 1800 : 1960;
      newX = Math.max(minBound, Math.min(maxBound, newX));
      newY = Math.max(minBound, Math.min(maxBound, newY));
      
      // Collision detection - check if movement is blocked
      if (isColliding(newX, newY)) {
        return prev; // Don't move if would collide
      }
      
      // Determine player direction based on movement
      let playerDirection = prev.direction;
      if (Math.abs(direction.x) > Math.abs(direction.y)) {
        // Horizontal movement is dominant
        playerDirection = direction.x > 0 ? 'right' : 'left';
      } else if (direction.y !== 0) {
        // Vertical movement
        playerDirection = direction.y < 0 ? 'up' : 'down';
      }
      
      return {
        ...prev,
        position: { x: newX, y: newY },
        targetPosition: { x: newX, y: newY },
        isMoving: true,
        direction: playerDirection
      };
    });
  }, [currentLocation, activeMenu]);

  const handleNPCInteract = useCallback((npc: NPC) => {
    console.log('handleNPCInteract called with:', npc.name);
    console.log('Current player position:', player.position);
    console.log('NPC position:', npc.position);
    setSelectedNPC(npc);
    
    // Mark merchant as visited for quest progress and update village introduction quest
    if (npc.type === 'merchant') {
      setPlayer(prev => ({
        ...prev,
        questProgress: {
          ...prev.questProgress,
          visitedMerchant: true,
          talkedToMerchant: true
        }
      }));
      
      // Update village introduction quest objective
      const villageQuest = quests.find(q => q.id === 'village-introduction' && q.status === 'active');
      if (villageQuest) {
        const updatedObjectives = villageQuest.objectives.map(obj => 
          obj.description === '–ü–æ–≥–æ–≤–æ—Ä–∏ —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º' ? { ...obj, completed: true } : obj
        );
        const updatedQuest = { ...villageQuest, objectives: updatedObjectives };
        setQuests(prev => [...prev.filter(q => q.id !== villageQuest.id), updatedQuest]);
      }
    }
    
    // Handle blacksmith interaction
    if (npc.type === 'blacksmith') {
      setPlayer(prev => ({
        ...prev,
        questProgress: {
          ...prev.questProgress,
          talkedToBlacksmith: true
        }
      }));

      // Update village introduction quest objective
      const villageQuest = quests.find(q => q.id === 'village-introduction' && q.status === 'active');
      if (villageQuest) {
        const updatedObjectives = villageQuest.objectives.map(obj => 
          obj.description === '–ü–æ–≥–æ–≤–æ—Ä–∏ —Å –∫—É–∑–Ω–µ—Ü–æ–º' ? { ...obj, completed: true } : obj
        );
        const updatedQuest = { ...villageQuest, objectives: updatedObjectives };
        setQuests(prev => [...prev.filter(q => q.id !== villageQuest.id), updatedQuest]);
      }

      const findBlacksmithQuest = quests.find(q => q.id === 'find-blacksmith' && q.status === 'active');
      if (findBlacksmithQuest) {
        const updatedObjectives = findBlacksmithQuest.objectives.map(obj => ({ ...obj, completed: true }));
        const updatedQuest = { ...findBlacksmithQuest, objectives: updatedObjectives };
        setQuests(prev => [...prev.filter(q => q.id !== findBlacksmithQuest.id), updatedQuest]);
      }
      
      // Handle coal quest completion
      const coalQuest = quests.find(q => q.id === 'find-coal' && q.status === 'active');
      const hasCoal = getTotalItemQuantity(player.inventory, '–£–≥–æ–ª—å') > 0;
      
      if (coalQuest && hasCoal) {
        // Remove coal from inventory
        setPlayer(prev => ({
          ...prev,
          inventory: removeItemFromInventory(prev.inventory, 'coal', 1)
        }));
        
        // Update quest objective
        const updatedObjectives = coalQuest.objectives.map(obj => 
          obj.description === '–í–µ—Ä–Ω–∏—Å—å –∫ –∫—É–∑–Ω–µ—Ü—É —Å —É–≥–ª–µ–º' ? { ...obj, completed: true } : obj
        );
        const updatedQuest = { ...coalQuest, objectives: updatedObjectives };
        setQuests(prev => [...prev.filter(q => q.id !== coalQuest.id), updatedQuest]);
      }

      // Handle ore quest completion
      const oreQuest = quests.find(q => q.id === 'ore-mining' && q.status === 'active');
      const oreCount = getTotalItemQuantity(player.inventory, '–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞');
      
      if (oreQuest && oreCount >= 3) {
        // Remove 3 ore from inventory
        setPlayer(prev => ({
          ...prev,
          inventory: removeItemFromInventory(prev.inventory, 'ore', 3)
        }));
        
        // Update quest objective
        const updatedObjectives = oreQuest.objectives.map(obj => 
          obj.description === '–í–µ—Ä–Ω–∏—Å—å –∫ –∫—É–∑–Ω–µ—Ü—É —Å —Ä—É–¥–æ–π' ? { ...obj, completed: true } : obj
        );
        const updatedQuest = { ...oreQuest, objectives: updatedObjectives };
        setQuests(prev => [...prev.filter(q => q.id !== oreQuest.id), updatedQuest]);
      }
    }
    
    // Note: Quests are now completed manually through the dialogue system
  }, [quests, npcs, setPlayer, player.inventory]);

  const handleEquipItem = useCallback((item: Item) => {
    if (!item.slot) return;

    setPlayer(prev => {
      const newEquipment = { ...prev.equipment };
      let newInventory = removeItemFromInventory(prev.inventory, item.id, 1);
      
      // If there's already an item in this slot, move it to inventory
      if (newEquipment[item.slot]) {
        newInventory = addItemsToInventory(newInventory, [newEquipment[item.slot]!]);
      }
      
      newEquipment[item.slot] = { ...item, quantity: 1 };

      return {
        ...prev,
        equipment: newEquipment,
        inventory: newInventory
      };
    });

    // Item equipped silently
  }, []);

  const handleAcceptQuest = useCallback((quest: Quest) => {
    const updatedQuest = { ...quest, status: 'active' as const };
    setQuests(prev => [...prev.filter(q => q.id !== quest.id), updatedQuest]);
    
    setSelectedNPC(null);
    
    // Quest accepted silently
  }, []);

  const handleCompleteQuest = useCallback((quest: Quest) => {
    console.log('Completing quest:', quest.id);
    
    // Complete the quest
    const completedQuest = {
      ...quest,
      status: 'completed' as const
    };
    setQuests(prev => [...prev.filter(q => q.id !== quest.id), completedQuest]);
    setCompletedQuestIds(prev => {
      const newIds = [...prev, quest.id];
      console.log('Updated completed quest IDs:', newIds);
      return newIds;
    });
    
    // Give rewards
    setPlayer(prev => ({
      ...prev,
      experience: prev.experience + quest.rewards.experience,
      coins: prev.coins + (quest.rewards.coins || 0),
      inventory: addItemsToInventory(prev.inventory, quest.rewards.items || [])
    }));
    
    // Show quest reward modal
    console.log('Setting quest reward modal for quest:', quest.id);
    setQuestReward(quest);
    
    // Handle quest chain unlocking
    if (quest.id === 'first-quest') {
      console.log('Attempting to unlock find-blacksmith quest');
      // Unlock find-blacksmith quest
      const elderNPC = npcs.find(n => n.id === 'elder');
      console.log('Elder NPC found:', elderNPC ? 'yes' : 'no');
      if (elderNPC) {
        const nextQuest = elderNPC.quests?.find(q => q.id === 'find-blacksmith');
        console.log('Next quest found:', nextQuest ? 'yes' : 'no');
        const questExists = quests.some(q => q.id === 'find-blacksmith');
        console.log('Quest already exists in quests array:', questExists);
        if (nextQuest && !questExists) {
          const unlockedQuest = { ...nextQuest, status: 'available' as const };
          console.log('Adding find-blacksmith quest to quests array');
          setQuests(prev => [...prev, unlockedQuest]);
        }
      }
    } else if (quest.id === 'find-blacksmith') {
      // Unlock coal quest
      const blacksmithNPC = npcs.find(n => n.id === 'blacksmith');
      if (blacksmithNPC) {
        const coalQuest = blacksmithNPC.quests?.find(q => q.id === 'find-coal');
        if (coalQuest) {
          const unlockedQuest = { ...coalQuest, status: 'available' as const };
          setQuests(prev => [...prev.filter(q => q.id !== coalQuest.id), unlockedQuest]);
        }
      }
    }
    
    setSelectedNPC(null);
  }, [npcs]);

  // Keyboard controls for desktop
  // Use refs to access current values for E key functionality
  const playerRef = useRef(player);
  const npcsRef = useRef(npcs);

  // Update refs when values change
  useEffect(() => {
    playerRef.current = player;
    npcsRef.current = npcs;
  }, [player, npcs]);

  useEffect(() => {
    if (isMobile) return;
    
    const pressedKeys = new Set<string>();

    const handleKeyDown = (event: KeyboardEvent) => {
      const key = event.key.toLowerCase();
      pressedKeys.add(key);
      
      // E key for interaction (both English and Russian layout)
      if ((key === 'e' || key === '—É') && selectedNPC === null && activeMenu === 'none') {
        event.preventDefault();
        
        // Check if player is near any NPC (only in village)
        if (currentLocation === 'village') {
          const nearbyNPC = npcsRef.current.find(npc => {
            const distance = Math.sqrt(
              Math.pow(npc.position.x - playerRef.current.position.x, 2) + 
              Math.pow(npc.position.y - playerRef.current.position.y, 2)
            );
            return distance < 80;
          });
          
          if (nearbyNPC) {
            setSelectedNPC(nearbyNPC);
            setShowVisualNovel(true);
            return;
          }
          
          // Check if player is near fountain (only in village)
          const fountainDistance = Math.sqrt(
            Math.pow(1000 - playerRef.current.position.x, 2) + 
            Math.pow(800 - playerRef.current.position.y, 2)
          );
          if (fountainDistance < 80) {
            handleFountainUse();
            return;
          }
        }
        
        // Check if player is near portal
        if (currentLocation === 'village') {
          const portalDistance = Math.sqrt(
            Math.pow(1700 - playerRef.current.position.x, 2) + 
            Math.pow(300 - playerRef.current.position.y, 2)
          );
          if (portalDistance < 80) {
            handlePortalUse();
            return;
          }
        } else if (currentLocation === 'abandoned-mines') {
          // Check for coal mine
          const coalMineDistance = Math.sqrt(
            Math.pow(400 - playerRef.current.position.x, 2) + 
            Math.pow(400 - playerRef.current.position.y, 2)
          );
          if (coalMineDistance < 80) {
            handleCoalMineInteract();
            return;
          }
          
          // Check for ore mine
          const oreMineDistance = Math.sqrt(
            Math.pow(600 - playerRef.current.position.x, 2) + 
            Math.pow(500 - playerRef.current.position.y, 2)
          );
          if (oreMineDistance < 80) {
            handleOreMineInteract();
            return;
          }
          
          // Check for treasure chest
          const treasureChestDistance = Math.sqrt(
            Math.pow(1960 - playerRef.current.position.x, 2) + 
            Math.pow(50 - playerRef.current.position.y, 2)
          );
          if (treasureChestDistance < 80 && !isTreasureChestOpened) {
            handleTreasureChestInteract();
            return;
          }
          
          // Check for return portal
          const portalDistance = Math.sqrt(
            Math.pow(50 - playerRef.current.position.x, 2) + 
            Math.pow(50 - playerRef.current.position.y, 2)
          );
          if (portalDistance < 80) {
            handlePortalUse();
            return;
          }
        }
      }
    };

    const handleKeyUp = (event: KeyboardEvent) => {
      const key = event.key.toLowerCase();
      pressedKeys.delete(key);
    };

    const movePlayer = () => {
      if (activeMenu !== 'none' || showCoalMining || showVisualNovel) return;
      
      const speed = calculateMovementSpeed(playerRef.current.stats.agility) / 100 * 1.5; // Base speed affected by agility
      let deltaX = 0;
      let deltaY = 0;
      let newDirection = playerRef.current.direction;
      
      // Movement keys (English and Russian layout)
      if (pressedKeys.has('arrowup') || pressedKeys.has('w') || pressedKeys.has('—Ü')) {
        deltaY = -speed;
        newDirection = 'up';
      }
      if (pressedKeys.has('arrowdown') || pressedKeys.has('s') || pressedKeys.has('—ã')) {
        deltaY = speed;
        newDirection = 'down';
      }
      if (pressedKeys.has('arrowleft') || pressedKeys.has('a') || pressedKeys.has('—Ñ')) {
        deltaX = -speed;
        newDirection = 'left';
      }
      if (pressedKeys.has('arrowright') || pressedKeys.has('d') || pressedKeys.has('–≤')) {
        deltaX = speed;
        newDirection = 'right';
      }
      
      if (deltaX !== 0 || deltaY !== 0) {
        handleJoystickMove({ x: deltaX, y: deltaY });
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);
    
    const moveInterval = setInterval(movePlayer, 16);

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
      clearInterval(moveInterval);
    };
  }, [isMobile, activeMenu, selectedNPC, handleJoystickMove, isNoClipCheatEnabled, isTreasureChestOpened]);

  const handleUnequipItem = useCallback((slot: keyof Equipment) => {
    const equippedItem = player.equipment[slot];
    if (!equippedItem) return;

    setPlayer(prev => ({
      ...prev,
      equipment: {
        ...prev.equipment,
        [slot]: null
      },
      inventory: [...prev.inventory, equippedItem]
    }));

    // Item unequipped silently
  }, [player.equipment]);

const handleBuyItem = useCallback((item: Item) => {
    if (!item.price || player.coins < item.price) {
      return;
    }

    if (item.type === 'skill' && item.skillId) {
      // Handle skill books - unlock the skill and remove from shop
      const skillToUnlock = availableSkills.find(skill => skill.id === item.skillId);
      if (skillToUnlock && !skillToUnlock.unlocked) {
        // Unlock the skill
        const skillIndex = availableSkills.findIndex(skill => skill.id === item.skillId);
        if (skillIndex !== -1) {
          availableSkills[skillIndex].unlocked = true;
        }
        
        // Remove book from merchant's shop
        setNpcs(prev => prev.map(npc => {
          if (npc.type === 'merchant' && npc.shop) {
            return {
              ...npc,
              shop: npc.shop.filter(shopItem => shopItem.id !== item.id)
            };
          }
          return npc;
        }));
        
        setPlayer(prev => ({
          ...prev,
          coins: prev.coins - item.price!
        }));
        
        toast({
          title: "–£–º–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–æ!",
          description: `–í—ã –∏–∑—É—á–∏–ª–∏ —É–º–µ–Ω–∏–µ "${skillToUnlock.name}". –¢–µ–ø–µ—Ä—å –µ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±–æ—é.`,
          duration: 2000
        });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: skillToUnlock?.unlocked ? "–≠—Ç–æ —É–º–µ–Ω–∏–µ —É–∂–µ –∏–∑—É—á–µ–Ω–æ" : "–£–º–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
          variant: "destructive",
          duration: 2000
        });
      }
    } else {
      // Handle regular items
      setPlayer(prev => ({
        ...prev,
        coins: prev.coins - item.price!,
        inventory: [...prev.inventory, item]
      }));

      toast({
        title: "–ü—Ä–µ–¥–º–µ—Ç –∫—É–ø–ª–µ–Ω!",
        description: `${item.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.`,
        duration: 2000
      });
    }
  }, [player.coins, toast]);

  const handleSellItem = useCallback((item: Item) => {
    const price = getSellPrice(item);
    setPlayer(prev => ({
      ...prev,
      coins: prev.coins + price,
      inventory: removeItemFromInventory(prev.inventory, item.id, 1)
    }));

    // Item sold silently
  }, []);

  const handleTrade = useCallback(() => {
    setActiveMenu('trade');
    setSelectedNPC(null);
    setShowVisualNovel(false);
  }, []);

  const handleFountainUse = useCallback(() => {
    if (player.coins < 5) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç",
        description: "–ù—É–∂–Ω–æ 5 –º–æ–Ω–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–æ–Ω—Ç–∞–Ω–∞",
        variant: "destructive",
        duration: 2000
      });
      return;
    }

    setPlayer(prev => ({
      ...prev,
      coins: prev.coins - 5,
      health: prev.maxHealth,
      mana: prev.maxMana,
      questProgress: {
        ...prev.questProgress,
        usedFountain: true
      }
    }));

    toast({
      title: "–§–æ–Ω—Ç–∞–Ω –∏—Å—Ü–µ–ª–µ–Ω–∏—è",
      description: "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!",
      duration: 2000
    });

    // Update first quest objective
    const firstQuest = quests.find(q => q.id === 'first-quest' && q.status === 'active');
    if (firstQuest) {
      const updatedObjectives = firstQuest.objectives.map(obj => 
        obj.description === '–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ–Ω—Ç–∞–Ω –∏—Å—Ü–µ–ª–µ–Ω–∏—è' ? { ...obj, completed: true } : obj
      );
      const updatedQuest = { ...firstQuest, objectives: updatedObjectives };
      setQuests(prev => [...prev.filter(q => q.id !== firstQuest.id), updatedQuest]);
    }
  }, [player.coins, quests, toast]);

  const handleCoalMineInteract = useCallback(() => {
    setShowCoalMining(true);
  }, []);

  const handleOreMineInteract = useCallback(() => {
    setShowOreMining(true);
  }, []);

  // Handle treasure chest interaction
  const handleTreasureChestInteract = useCallback(() => {
    if (isTreasureChestOpened) return;

    // Create magical items
    const magicalItems: Item[] = [
      {
        id: 'magical-boots',
        name: '–ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–∞–ø–æ–≥–∏',
        type: 'armor',
        slot: 'legs',
        stats: { armor: 2, health: 5 },
        description: '–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–ø–æ–≥–∏, –¥–∞—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –∏ –º–∞–≥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É',
        icon: '/boots_empty.png',
        price: 120
      },
      {
        id: 'magical-cloak',
        name: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–ª–∞—â',
        type: 'armor',
        slot: 'chest',
        stats: { armor: 4, health: 8 },
        description: '–í–æ–ª—à–µ–±–Ω—ã–π –ø–ª–∞—â, –ø—Ä–æ–ø–∏—Ç–∞–Ω–Ω—ã–π –¥—Ä–µ–≤–Ω–µ–π –º–∞–≥–∏–µ–π',
        icon: '/leatherarmor.png',
        price: 180
      },
      {
        id: 'magical-hood',
        name: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–∞–ø—é—à–æ–Ω',
        type: 'armor',
        slot: 'head',
        stats: { armor: 3, health: 10 },
        description: '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–ø—é—à–æ–Ω, —É—Å–∏–ª–∏–≤–∞—é—â–∏–π –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
        icon: '/helmet_empty.png',
        price: 150
      }
    ];

    // Select random magical item
    const selectedMagicalItem = magicalItems[Math.floor(Math.random() * magicalItems.length)];

    // Health potions
    const healthPotions: Item[] = [
      {
        id: 'health-potion-1',
        name: '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è',
        type: 'consumable',
        description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 50 –µ–¥–∏–Ω–∏—Ü –∑–¥–æ—Ä–æ–≤—å—è',
        icon: '/healthpotion.png',
        stackable: true,
        maxStack: 10,
        quantity: 1
      },
      {
        id: 'health-potion-2',
        name: '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è',
        type: 'consumable',
        description: '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 50 –µ–¥–∏–Ω–∏—Ü –∑–¥–æ—Ä–æ–≤—å—è',
        icon: '/healthpotion.png',
        stackable: true,
        maxStack: 10,
        quantity: 1
      }
    ];

    // Add items to inventory and coins
    setPlayer(prev => ({
      ...prev,
      coins: prev.coins + 100,
      inventory: addItemsToInventory(prev.inventory, [selectedMagicalItem, ...healthPotions])
    }));

    // Mark chest as opened
    setIsTreasureChestOpened(true);

    toast({
      title: "–°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏!",
      description: `–ü–æ–ª—É—á–µ–Ω–æ: 100 –º–æ–Ω–µ—Ç, 2 –∑–µ–ª—å—è –∑–¥–æ—Ä–æ–≤—å—è, ${selectedMagicalItem.name}`,
    });
  }, [isTreasureChestOpened, toast]);

  const handlePortalUse = useCallback(() => {
    setIsLoadingLocation(true);
    
    setTimeout(() => {
      if (currentLocation === 'village') {
        setCurrentLocation('abandoned-mines');
        
        // Find safe position AFTER changing location
        setTimeout(() => {
          const inWall = (px: number, py: number) => {
            for (const r of minesObstacles) {
              if (px >= r.x && px <= r.x + r.w && py >= r.y && py <= r.y + r.h) return true;
            }
            return false;
          };
          
          let safePos = { x: 50, y: 100 };
          if (inWall(safePos.x, safePos.y)) {
            // Search for safe position near entrance
            const step = 10;
            const maxRadius = 300;
            let found = false;
            for (let radius = step; radius <= maxRadius && !found; radius += step) {
              for (let angle = 0; angle < Math.PI * 2 && !found; angle += Math.PI / 8) {
                const px = Math.max(40, Math.min(1960, Math.round(50 + Math.cos(angle) * radius)));
                const py = Math.max(40, Math.min(1960, Math.round(100 + Math.sin(angle) * radius)));
                if (!inWall(px, py)) {
                  safePos = { x: px, y: py };
                  found = true;
                }
              }
            }
            if (!found) {
              safePos = { x: 140, y: 140 }; // Fallback position
            }
          }
          
          setPlayer(prev => ({
            ...prev,
            position: safePos,
            targetPosition: safePos
          }));
          
          console.log('Teleported to mines at position:', safePos);
        }, 100);
      } else {
        setCurrentLocation('village');
        setPlayer(prev => ({
          ...prev,
          position: { x: 1000, y: 1000 },
          targetPosition: { x: 1000, y: 1000 }
        }));
        console.log('Teleported to village at position: 1000, 1000');
      }
      setIsLoadingLocation(false);
    }, 1500);
  }, [currentLocation]);

  const handleMineCoal = useCallback(() => {
    if (resourceNodes.coal.count <= 0) return;

    // Add coal to inventory
    const coal = {
      id: 'coal',
      name: '–£–≥–æ–ª—å',
      type: 'misc' as const,
      description: '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —É–≥–æ–ª—å –¥–ª—è –∫—É–∑–Ω–µ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç',
      icon: '/coal.png',
      stackable: true,
      maxStack: 10
    };

    setPlayer(prev => ({
      ...prev,
      inventory: addItemsToInventory(prev.inventory, [coal])
    }));

    // Decrease resource count
    setResourceNodes(prev => ({
      ...prev,
      coal: {
        ...prev.coal,
        count: prev.coal.count - 1
      }
    }));

    // Update quest objective if exists
    const coalQuest = quests.find(q => q.id === 'find-coal' && q.status === 'active');
    if (coalQuest) {
      const updatedObjectives = coalQuest.objectives.map(obj => 
        obj.description === '–ù–∞–π–¥–∏ —É–≥–æ–ª—å –≤ –ª–µ—Å—É' ? { ...obj, completed: true } : obj
      );
      const updatedQuest = { ...coalQuest, objectives: updatedObjectives };
      setQuests(prev => [...prev.filter(q => q.id !== coalQuest.id), updatedQuest]);
    }
    
    setShowCoalMining(false);
    
    toast({
      title: "–î–æ–±—ã—á–∞ —É–≥–ª—è",
      description: "–í—ã –¥–æ–±—ã–ª–∏ —É–≥–æ–ª—å!",
      duration: 2000
    });
  }, [resourceNodes.coal.count, quests, toast]);

  const handleMineOre = useCallback(() => {
    if (resourceNodes.ore.count <= 0) return;

    // Add ore to inventory
    const ore = {
      id: 'ore',
      name: '–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞',
      type: 'misc' as const,
      description: '–ö—É—Å–æ–∫ –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
      icon: '/ore_iron.png',
      stackable: true,
      maxStack: 10
    };

    setPlayer(prev => ({
      ...prev,
      inventory: addItemsToInventory(prev.inventory, [ore])
    }));

    // Decrease resource count
    setResourceNodes(prev => ({
      ...prev,
      ore: {
        ...prev.ore,
        count: prev.ore.count - 1
      }
    }));

    // Update quest objective if exists
    const oreQuest = quests.find(q => q.id === 'ore-mining' && q.status === 'active');
    if (oreQuest) {
      const oreCount = getTotalItemQuantity(player.inventory, '–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞') + 1; // +1 for the one we just added
      const updatedObjectives = oreQuest.objectives.map(obj => 
        obj.description.includes('–ù–∞–π—Ç–∏ 3 –∫—É—Å–∫–∞ —Ä—É–¥—ã') 
          ? { ...obj, description: `–ù–∞–π—Ç–∏ 3 –∫—É—Å–∫–∞ —Ä—É–¥—ã –≤ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —à–∞—Ö—Ç–∞—Ö (${oreCount}/3)`, completed: oreCount >= 3 }
          : obj
      );
      const updatedQuest = { ...oreQuest, objectives: updatedObjectives };
      setQuests(prev => [...prev.filter(q => q.id !== oreQuest.id), updatedQuest]);
    }
    
    setShowOreMining(false);
    
    toast({
      title: "–î–æ–±—ã—á–∞ —Ä—É–¥—ã",
      description: "–í—ã –¥–æ–±—ã–ª–∏ –∂–µ–ª–µ–∑–Ω—É—é —Ä—É–¥—É!",
      duration: 2000
    });
  }, [resourceNodes.ore.count, quests, player.inventory, toast]);

  // Render battle screens
  if (gameScreen === 'battle' && battleState) {
    return (
      <BattleScreen
        battleState={battleState}
        currentPlayer={player}
        onAttack={handleBattleAttack}
        onUseSkill={handleBattleSkill}
        onUseItem={handleBattleUseItem}
        onBattleEnd={handleBattleFlee}
        damageTexts={damageTexts}
        battleLog={battleLog}
      />
    );
  }

  if (gameScreen === 'battle-victory' && battleResult) {
    return (
      <BattleVictory
        experienceGained={battleResult.experienceGained}
        coinsGained={battleResult.coinsGained}
        lootItems={battleResult.lootItems}
        onContinue={handleBattleVictory}
      />
    );
  }

  if (gameScreen === 'battle-defeat') {
    return (
      <BattleDefeat
        onContinue={handleBattleDefeat}
      />
    );
  }

  return (
    <div className="h-screen flex flex-col bg-background text-foreground overflow-hidden">
        {/* World coordinates display */}
        <div className="absolute top-4 left-4 bg-black/80 text-white p-3 rounded text-sm font-mono z-50 border border-white/20">
          <div className="text-green-400 font-bold">WORLD COORDINATES</div>
          <div>X: {Math.round(player.position.x)}</div>
          <div>Y: {Math.round(player.position.y)}</div>
          <div className="text-xs text-gray-300 mt-1">Location: {currentLocation}</div>
        </div>

        <PlayerStats player={player} />
      
          <GameMap
            player={player}
            npcs={npcs}
            enemies={currentLocation === 'abandoned-mines' ? enemies : []}
            onNPCInteract={handleNPCInteract}
            onEnemyClick={() => {}} // No attacks outside battle
            onFountainUse={handleFountainUse}
            onCoalMineInteract={handleCoalMineInteract}
            currentLocation={currentLocation}
            onPortalUse={handlePortalUse}
            onNoClipToggle={setIsNoClipCheatEnabled}
            onTreasureChestInteract={handleTreasureChestInteract}
            isTreasureChestOpened={isTreasureChestOpened}
          />

      {isMobile && (
        <VirtualJoystick
          onMove={handleJoystickMove}
          disabled={activeMenu !== 'none' || selectedNPC !== null}
        />
      )}

      {/* Sidebar Menu Trigger */}
      <div className="fixed top-4 left-4 z-50">
        <Button
          variant="outline"
          size="sm"
          onClick={() => setActiveMenu('sidebar')}
          className="bg-card/90 backdrop-blur-sm p-2"
          disabled={activeMenu !== 'none'}
        >
          <span className="flex flex-col space-y-1">
            <div className="w-4 h-0.5 bg-foreground"></div>
            <div className="w-4 h-0.5 bg-foreground"></div>
            <div className="w-4 h-0.5 bg-foreground"></div>
          </span>
        </Button>
      </div>

      {/* Sidebar Menu */}
      {activeMenu === 'sidebar' && (
        <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex">
          <div className="w-2/3 h-full bg-card border-r border-border shadow-lg flex flex-col">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-border">
              <h2 className="text-lg font-semibold text-foreground">–ú–µ–Ω—é</h2>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setActiveMenu('none')}
                className="p-2"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            {/* Menu Items */}
            <div className="flex-1 p-4 space-y-3">
              <Button
                variant="secondary"
                className="w-full justify-start text-left h-14 text-sm"
                onClick={() => {
                  setActiveMenu('stats');
                }}
              >
                <span className="text-lg mr-3">üí™</span>
                –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                {player.unallocatedPoints > 0 && (
                  <span className="ml-auto bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                    {player.unallocatedPoints}
                  </span>
                )}
              </Button>
              
              <Button
                variant="secondary"
                className="w-full justify-start text-left h-14 text-sm"
                onClick={() => {
                  setActiveMenu('equipment');
                }}
              >
                <span className="text-lg mr-3">‚öîÔ∏è</span>
                –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞
              </Button>
              
              <Button
                variant="secondary"
                className="w-full justify-start text-left h-14 text-sm"
                onClick={() => {
                  setActiveMenu('inventory');
                }}
              >
                <span className="text-lg mr-3">üéí</span>
                –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
              </Button>
              
              <Button
                variant="secondary"
                className="w-full justify-start text-left h-14 text-sm"
                onClick={() => {
                  setActiveMenu('skills');
                }}
              >
                <span className="text-lg mr-3">‚ö°</span>
                –£–º–µ–Ω–∏—è
              </Button>
              
              <Button
                variant="secondary"
                className="w-full justify-start text-left h-14 text-sm"
                onClick={() => {
                  setActiveMenu('quests');
                }}
              >
                <span className="text-lg mr-3">üìú</span>
                –ñ—É—Ä–Ω–∞–ª –∫–≤–µ—Å—Ç–æ–≤
              </Button>
            </div>
          </div>
          
          {/* Empty area to close sidebar when clicked */}
          <div 
            className="flex-1 h-full"
            onClick={() => setActiveMenu('none')}
          />
        </div>
      )}

      {/* Visual Novel Dialogue */}
{selectedNPC && showVisualNovel && (
  <VisualNovelDialogue
    npc={selectedNPC}
    hasActiveVillageQuest={quests.some(q => q.id === 'village-introduction' && q.status === 'active')}
    hasCompletedVillageQuest={completedQuestIds.includes('village-introduction')}
    firstMerchantTalk={player.questProgress.firstMerchantTalk}
    firstBlacksmithTalk={player.questProgress.firstBlacksmithTalk}
    onMarkConversation={(npcType) => {
      setPlayer(prev => ({
        ...prev,
        questProgress: {
          ...prev.questProgress,
          firstMerchantTalk: npcType === 'merchant' ? false : prev.questProgress.firstMerchantTalk,
          firstBlacksmithTalk: npcType === 'blacksmith' ? false : prev.questProgress.firstBlacksmithTalk
        }
      }));
    }}
    onClose={() => {
      setSelectedNPC(null);
      setShowVisualNovel(false);
    }}
    onQuestAccept={(questId) => {
      // Create simple quest objects based on quest ID
            const questTemplates = {
              'village-defense': {
                id: 'village-defense',
                title: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–º–∏',
                description: '–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∂–∏—Ç–µ–ª—è–º–∏ –¥–µ—Ä–µ–≤–Ω–∏.',
                status: 'active' as const,
                giver: 'elder',
                repeatable: false,
                objectives: [
                  { description: '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º', completed: false },
                  { description: '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫—É–∑–Ω–µ—Ü–æ–º', completed: false }
                ],
                rewards: {
                  experience: 100,
                  coins: 50
                }
              },
              'wolf-pelts': {
                id: 'wolf-pelts',
                title: '–®–∫—É—Ä—ã –≤–æ–ª–∫–æ–≤',
                description: '–î–æ–±—ã—Ç—å —à–∫—É—Ä—ã –≤–æ–ª–∫–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—Ü–∞.',
                status: 'active' as const,
                giver: 'merchant',
                repeatable: false,
                objectives: [
                  { description: '–ü—Ä–∏–Ω–µ—Å—Ç–∏ —à–∫—É—Ä—ã –≤–æ–ª–∫–æ–≤', completed: false }
                ],
                rewards: {
                  experience: 75,
                  coins: 30
                }
              },
              'ore-mining': {
                id: 'ore-mining',
                title: '–î–æ–±—ã—á–∞ —Ä—É–¥—ã',
                description: '–î–æ–±—ã—Ç—å —Ä—É–¥—É –¥–ª—è –∫—É–∑–Ω–µ—Ü–∞.',
                status: 'active' as const,
                giver: 'blacksmith',
                repeatable: false,
                objectives: [
                  { description: '–î–æ–±—ã—Ç—å —Ä—É–¥—É –≤ —à–∞—Ö—Ç–µ', completed: false }
                ],
                rewards: {
                  experience: 85,
                  coins: 40
                }
              }
            };

            const newQuest = questTemplates[questId];
            if (newQuest && !quests.some(q => q.id === questId)) {
              setQuests(prev => [...prev, newQuest]);
              toast({
                title: "–ù–æ–≤—ã–π –∫–≤–µ—Å—Ç!",
                description: `–ü—Ä–∏–Ω—è—Ç –∫–≤–µ—Å—Ç: ${newQuest.title}`,
                duration: 2000
              });
            }
}}
          onTrade={handleTrade}
        />
      )}

      {/* NPC Dialogue */}
      {selectedNPC && !showVisualNovel && (
        <NPCDialogue
          npc={selectedNPC}
          onClose={() => setSelectedNPC(null)}
          onAcceptQuest={handleAcceptQuest}
          onTrade={handleTrade}
          activeQuests={quests.filter(q => q.status === 'active')}
          onCompleteQuest={handleCompleteQuest}
          completedQuestIds={completedQuestIds}
          allQuests={quests}
        />
      )}

      {/* Menus */}
      {activeMenu === 'inventory' && (
        <InventoryMenu
          player={player}
          onClose={() => setActiveMenu('none')}
          onEquipItem={handleEquipItem}
        />
      )}

      {activeMenu === 'equipment' && (
        <EquipmentMenu
          player={player}
          onClose={() => setActiveMenu('none')}
          onUnequipItem={handleUnequipItem}
        />
      )}

      {activeMenu === 'quests' && (
        <QuestMenu
          quests={quests}
          onClose={() => setActiveMenu('none')}
        />
      )}

{activeMenu === 'trade' && (
        <TradeMenu
          player={player}
          merchant={npcs.find(npc => npc.type === 'merchant')!}
          onClose={() => { setActiveMenu('none'); setShowVisualNovel(false); setSelectedNPC(null); }}
          onBuyItem={handleBuyItem}
          onSellItem={handleSellItem}
        />
      )}

      {activeMenu === 'stats' && (
        <StatsMenu
          player={player}
          onClose={() => setActiveMenu('none')}
          onAllocatePoint={handleAllocatePoint}
        />
      )}

      {activeMenu === 'skills' && (
        <SkillsMenu
          player={player}
          onUpdatePlayer={(updates) => setPlayer(prev => ({ ...prev, ...updates }))}
          onClose={() => setActiveMenu('none')}
        />
      )}

      {/* Coal Mining */}
      {showCoalMining && (
        <CoalMining
          onClose={() => setShowCoalMining(false)}
          onMineCoal={handleMineCoal}
          resourceCount={resourceNodes.coal.count}
        />
      )}

      {/* Ore Mining */}
      {showOreMining && (
        <OreMining
          onClose={() => setShowOreMining(false)}
          onMineOre={handleMineOre}
          resourceCount={resourceNodes.ore.count}
        />
      )}

      {/* Quest Reward Modal */}
      {questReward && (
        <QuestRewardModal
          quest={questReward}
          onClose={() => setQuestReward(null)}
        />
      )}

      {/* Loading Screen */}
      {isLoadingLocation && (
        <LoadingScreen 
          message={currentLocation === 'village' ? '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–µ —à–∞—Ö—Ç—ã...' : '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–µ—Ä–µ–≤–Ω—é...'}
        />
      )}
    </div>
  );
};

export default RPGGame;